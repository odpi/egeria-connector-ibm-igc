{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"About"},{"location":"cts/","text":"Testing overview \u00b6 Conformance Test Suite ( CTS ) \u00b6 The Conformance Test Suite ( CTS ) measures conformance of the repository with the expected behavior of an Egeria repository. Conformance indicates that the repository behaves precisely as expected for an Egeria repository. Reproducibility \u00b6 Re-running the tests \u00b6 The cts/charts directory contains a Helm chart to automate the execution of these suites against an IGC proxy, to reproduce these results. Must be a pre-populated IBM Information Server environment Note that since the proxy operates in a read-only manner, the IBM Information Server environment it is configured to connect to must be pre-populated with metadata before the CTS can produce any meaningful results. Also be aware that the CTS is designed only to test the low-level protocols of a metadata repository, and therefore can only be run against the IGC proxy (not the DataStage proxy). Data points \u00b6 The cts/results directory contains results of running the suites against the IGC proxy and a set of pre-defined metadata representative of a fictitious \"Coco Pharmaceuticals\" company against a number of different releases of IBM Information Governance Catalog ( IGC ). For each release, you will find the following details: openmetadata.conformance.testlab.results - the detailed results, as produced by the CTS workbench itself Description of the k8s environment <version>.deployment - details of the deployed components used for the test <version>.configmap - details of the variables used within the components of the test The OMAG server configurations: omag.server.ibmigc.config - the configuration of the IGC connector (proxy) omag.server.cts.config - the configuration of the CTS workbench The cohort registrations: cohort.coco.ibmigc.local - the local IGC connector (proxy) cohort registration information cohort.coco.ibmigc.remote - the cohort members considered remote from the IGC connector (proxy)'s perspective cohort.coco.cts.local - the local CTS Workbench cohort registration cohort.coco.cts.remote - the cohort members considered remote from the CTS Workbench's perspective","title":"Testing overview"},{"location":"cts/#testing-overview","text":"","title":"Testing overview"},{"location":"cts/#conformance-test-suite-cts","text":"The Conformance Test Suite ( CTS ) measures conformance of the repository with the expected behavior of an Egeria repository. Conformance indicates that the repository behaves precisely as expected for an Egeria repository.","title":"Conformance Test Suite (CTS)"},{"location":"cts/#reproducibility","text":"","title":"Reproducibility"},{"location":"cts/#re-running-the-tests","text":"The cts/charts directory contains a Helm chart to automate the execution of these suites against an IGC proxy, to reproduce these results. Must be a pre-populated IBM Information Server environment Note that since the proxy operates in a read-only manner, the IBM Information Server environment it is configured to connect to must be pre-populated with metadata before the CTS can produce any meaningful results. Also be aware that the CTS is designed only to test the low-level protocols of a metadata repository, and therefore can only be run against the IGC proxy (not the DataStage proxy).","title":"Re-running the tests"},{"location":"cts/#data-points","text":"The cts/results directory contains results of running the suites against the IGC proxy and a set of pre-defined metadata representative of a fictitious \"Coco Pharmaceuticals\" company against a number of different releases of IBM Information Governance Catalog ( IGC ). For each release, you will find the following details: openmetadata.conformance.testlab.results - the detailed results, as produced by the CTS workbench itself Description of the k8s environment <version>.deployment - details of the deployed components used for the test <version>.configmap - details of the variables used within the components of the test The OMAG server configurations: omag.server.ibmigc.config - the configuration of the IGC connector (proxy) omag.server.cts.config - the configuration of the CTS workbench The cohort registrations: cohort.coco.ibmigc.local - the local IGC connector (proxy) cohort registration information cohort.coco.ibmigc.remote - the cohort members considered remote from the IGC connector (proxy)'s perspective cohort.coco.cts.local - the local CTS Workbench cohort registration cohort.coco.cts.remote - the cohort members considered remote from the CTS Workbench's perspective","title":"Data points"},{"location":"cts/results/","text":"CTS results \u00b6 All version numbers below refer to the version of the connector that was tested, against the release of Egeria with precisely the same version number. 2.11 \u00b6 The 2.11 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 (not tested) 1 v11.5.0.2 SP5 (not tested) 1 v11.5.0.2 SP6 (not tested) 1 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 2.10 \u00b6 The 2.10 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 (not tested) 1 v11.5.0.2 SP5 (not tested) 1 v11.5.0.2 SP6 (not tested) 1 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 2.5 \u00b6 The 2.5 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) In addition, certain searches for ContactDetails are known to fail, as tracked under issue #457 IGC version Conformant profile(s) v11.5.0.2 SP3 (not tested) 1 v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 (not tested) 1 v11.7.0.0 Metadata sharing 3 , Relationship search v11.7.0.1 Metadata sharing 3 , Relationship search v11.7.0.1 SP1 Metadata sharing 3 , Relationship search v11.7.0.2 Metadata sharing 2 , 3 , Relationship search v11.7.1.0 Metadata sharing 2 , 3 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , 3 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , 3 , Relationship search 2.2 \u00b6 The 2.2 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 2.1 \u00b6 The 2.1 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 2.0 \u00b6 The 2.0 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 1.8 \u00b6 The 1.8 release is not conformant The CTS in release 1.8 of Egeria included some changes that were not handling regular expressions in searches as expected , causing conformance to fail across the board for the IGC proxy. These have since been resolved. IGC version Conformant profile(s) v11.5.0.2 SP3 None v11.5.0.2 SP5 None v11.5.0.2 SP6 None 4 v11.7.0.0 None v11.7.0.1 None v11.7.0.1 SP1 None v11.7.0.2 None v11.7.1.0 None v11.7.1.0 SP1 None v11.7.1.0 SP2 None 1.6 \u00b6 The 1.6 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 1.5 \u00b6 The 1.5 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 1.4 \u00b6 The 1.4 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) In addition, the v11.7.0.0 release models a database column's length as an array of strings, causing deserialization to fail (tracked under issue #229 ) Finally, note that there is no 1.4 release of the connector, so these results are based on testing release 1.3 of the connector against release 1.4 of Egeria. IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 None 5 v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search 1.3 \u00b6 The 1.3 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) In addition, the v11.7.0.0 release models a database column's length as an array of strings, causing deserialization to fail (tracked under issue #229 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 None 5 v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing, Relationship search v11.7.1.0 Metadata sharing, Relationship search v11.7.1.0 SP1 Metadata sharing, Relationship search v11.7.1.0 SP2 Metadata sharing, Relationship search 1.2 \u00b6 The 1.2 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing v11.5.0.2 SP5 Metadata sharing v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing v11.7.0.1 Metadata sharing v11.7.0.1 SP1 Metadata sharing v11.7.0.2 Metadata sharing v11.7.1.0 Metadata sharing v11.7.1.0 SP1 Metadata sharing v11.7.1.0 SP2 Metadata sharing Information Server v11.5.x uses the TLS v1.0 communication standard, which has now been deprecated for several years. This makes ongoing testing of these releases significantly more cumbersome, and therefore we will no longer continue testing the connector against these releases. \u21a9 In v11.7.0.2 and above of IBM Information Governance Catalog there is no longer support for searching against the long_description property in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) \u21a9 A known issue resulted in certain searches for ContactDetails to fail. \u21a9 v11.5.0.2 SP6 appears to contain a bug regarding pagination of complex search criteria, causing some of the find... methods to fail. \u21a9 v11.7.0.0 models a database column's length as an array of strings, which caused deserialization to fail in certain connector versions (tracked under issue #229 ) \u21a9","title":"CTS results"},{"location":"cts/results/#cts-results","text":"All version numbers below refer to the version of the connector that was tested, against the release of Egeria with precisely the same version number.","title":"CTS results"},{"location":"cts/results/#211","text":"The 2.11 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 (not tested) 1 v11.5.0.2 SP5 (not tested) 1 v11.5.0.2 SP6 (not tested) 1 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"2.11"},{"location":"cts/results/#210","text":"The 2.10 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 (not tested) 1 v11.5.0.2 SP5 (not tested) 1 v11.5.0.2 SP6 (not tested) 1 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"2.10"},{"location":"cts/results/#25","text":"The 2.5 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) In addition, certain searches for ContactDetails are known to fail, as tracked under issue #457 IGC version Conformant profile(s) v11.5.0.2 SP3 (not tested) 1 v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 (not tested) 1 v11.7.0.0 Metadata sharing 3 , Relationship search v11.7.0.1 Metadata sharing 3 , Relationship search v11.7.0.1 SP1 Metadata sharing 3 , Relationship search v11.7.0.2 Metadata sharing 2 , 3 , Relationship search v11.7.1.0 Metadata sharing 2 , 3 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , 3 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , 3 , Relationship search","title":"2.5"},{"location":"cts/results/#22","text":"The 2.2 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"2.2"},{"location":"cts/results/#21","text":"The 2.1 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"2.1"},{"location":"cts/results/#20","text":"The 2.0 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"2.0"},{"location":"cts/results/#18","text":"The 1.8 release is not conformant The CTS in release 1.8 of Egeria included some changes that were not handling regular expressions in searches as expected , causing conformance to fail across the board for the IGC proxy. These have since been resolved. IGC version Conformant profile(s) v11.5.0.2 SP3 None v11.5.0.2 SP5 None v11.5.0.2 SP6 None 4 v11.7.0.0 None v11.7.0.1 None v11.7.0.1 SP1 None v11.7.0.2 None v11.7.1.0 None v11.7.1.0 SP1 None v11.7.1.0 SP2 None","title":"1.8"},{"location":"cts/results/#16","text":"The 1.6 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"1.6"},{"location":"cts/results/#15","text":"The 1.5 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing, Relationship search v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"1.5"},{"location":"cts/results/#14","text":"The 1.4 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) In addition, the v11.7.0.0 release models a database column's length as an array of strings, causing deserialization to fail (tracked under issue #229 ) Finally, note that there is no 1.4 release of the connector, so these results are based on testing release 1.3 of the connector against release 1.4 of Egeria. IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 None 5 v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing 2 , Relationship search v11.7.1.0 Metadata sharing 2 , Relationship search v11.7.1.0 SP1 Metadata sharing 2 , Relationship search v11.7.1.0 SP2 Metadata sharing 2 , Relationship search","title":"1.4"},{"location":"cts/results/#13","text":"The 1.3 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) In addition, the v11.7.0.0 release models a database column's length as an array of strings, causing deserialization to fail (tracked under issue #229 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing, Relationship search v11.5.0.2 SP5 Metadata sharing, Relationship search v11.5.0.2 SP6 None 4 v11.7.0.0 None 5 v11.7.0.1 Metadata sharing, Relationship search v11.7.0.1 SP1 Metadata sharing, Relationship search v11.7.0.2 Metadata sharing, Relationship search v11.7.1.0 Metadata sharing, Relationship search v11.7.1.0 SP1 Metadata sharing, Relationship search v11.7.1.0 SP2 Metadata sharing, Relationship search","title":"1.3"},{"location":"cts/results/#12","text":"The 1.2 release is conformant with the mandatory profiles, with some limitations Note that in v11.7.0.2 and above there is no longer support for searching against the long_description property of IGC in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) IGC version Conformant profile(s) v11.5.0.2 SP3 Metadata sharing v11.5.0.2 SP5 Metadata sharing v11.5.0.2 SP6 None 4 v11.7.0.0 Metadata sharing v11.7.0.1 Metadata sharing v11.7.0.1 SP1 Metadata sharing v11.7.0.2 Metadata sharing v11.7.1.0 Metadata sharing v11.7.1.0 SP1 Metadata sharing v11.7.1.0 SP2 Metadata sharing Information Server v11.5.x uses the TLS v1.0 communication standard, which has now been deprecated for several years. This makes ongoing testing of these releases significantly more cumbersome, and therefore we will no longer continue testing the connector against these releases. \u21a9 In v11.7.0.2 and above of IBM Information Governance Catalog there is no longer support for searching against the long_description property in combination with other search criteria, and therefore these releases cannot fully support all of the find... methods (tracked under issue #215 ) \u21a9 A known issue resulted in certain searches for ContactDetails to fail. \u21a9 v11.5.0.2 SP6 appears to contain a bug regarding pagination of complex search criteria, causing some of the find... methods to fail. \u21a9 v11.7.0.0 models a database column's length as an array of strings, which caused deserialization to fail in certain connector versions (tracked under issue #229 ) \u21a9","title":"1.2"},{"location":"getting-started/common/","text":"Common setup steps \u00b6 Regardless of whether you are configuring the IBM Information Governance Catalog adapter or the DataStage adapter (or both), there are a number of initial steps that are common. 1. Obtain connector \u00b6 Start by downloading the IBM Information Server connectors: Latest release Latest snapshot The connector is: egeria-connector-ibm-information-server-package-{version}-jar-with-dependencies.jar 2. Obtain server chassis \u00b6 Download Egeria's server chassis: Latest release Latest snapshot The connector version indicates the minimum required Egeria version The server chassis is: server-chassis-spring-{version}.jar 3. Configure security \u00b6 To get an initial environment up-and-running just download the truststore.p12 file from: https://github.com/odpi/egeria/raw/master/truststore.p12 . Transport-level security The truststore.p12 file provides a local truststore for Java. This allows the self-signed certificate embedded within the server chassis (by default) to be trusted. Without this trust, interactions with the server chassis (such as the REST calls that are made through Java to handle interaction between the chassis and the connector) will result in an SSLHandshakeException . While this truststore.p12 file allows SSL-encrypted communication, the fact that it relies on a self-signed certificate means that there is no independent source of trust in the interactions (which would typically be achieved through an independent Certificate Authority). Additional details on TLS for Egeria can be found in the Egeria documentation . While the truststore.p12 file sets up TLS for Egeria itself, there is also the communication between the connector and the IBM Information Server environment to consider. One of the following options must be chosen when configuring the connector: Disable SSL for IBM Information Server \u00b6 The simplest method to configure this layer of the transport is to disable SSL verification itself, which you can do by exporting the environment variable STRICT_SSL=false or passing the argument -Dstrict.ssl=false to the java command when running the server chassis. Insecure Both of these effectively disable security by disabling SSL verification. While this is likely acceptable for some development or testing purposes, it is not recommended for production usage. For more robust (albeit also more cumbersome) approaches see the further details on other options below. Configure SSL for IBM Information Server \u00b6 Configure Java keystore \u00b6 With this approach you can tell Java to trust the certificate of one or more systems, even when those systems only have self-signed certificates. Somewhat secure This is more secure than entirely disabling SSL verification, as it provides a sort of whitelist for certificates to trust; however, it does not rely on an independent party to verify that trust. Done without proper diligence, there is therefore still some risk in this approach. Begin by obtaining the self-signed certificate of the IGC host (from any machine with a JVM: could be the Egeria OMAG Server Platform so long as you're confident it is reaching the correct host): keytool -printcert -sslserver my.igc.host.com:9446 -rfc > infosvr_self_signed.crt Hostname must match Note that you need to use the correct hostname and port number of the domain (services) tier of your environment. This means the hostname by which that server knows itself -- it should not be an IP address. Next, import the certificate into the Java keystore used by the environment. For example, in an Alpine openjdk docker image, this would be /etc/ssl/certs/java/cacerts : keytool -trustcacerts -keystore /etc/ssl/certs/java/cacerts -storepass changeit -noprompt -alias my.igc.host.com -importcert -file infosvr_self_signed.crt rm infosvr_self_signed.crt Explanation of the command The keystore location should be specified, and it is best to use the one for the environment itself (if a user-specific keystore it will likely depend on the user under which the JVM itself is running whether it is picked up or not). The default keystore password in Java is changeit ; obviously replace this with the password for your actual keystore if it has been changed... (Both the -storepass and -noprompt can be skipped if you would rather be prompted for the password and confirmation of importing the certificate.) The -alias should be specified and must match the hostname of the IGC machine itself (the services tier host): if different, the certificate won't match and won't be validated. Use an independent certificate authority (CA) \u00b6 This approach relies on a third party (a \"certificate authority\") to sign the certificates to be used by your environments, and leverages inherent trust in these third parties in order to validate such signed certificates automatically. Most secure This approach is generally accepted as the most robust and secure. However, this option also relies on obtaining (typically at a cost) such certificate signatures, and updating the configuration of your system(s) to leverage these new signed certificates rather than the self-signed certificates they possess by default. More information on doing this specifically for IBM Information Server can be found in IBM's Knowledge Center . After configuring such a signed certificate, you should be able to connect to the IBM environment without any further configuration of either the connector, OMAG Server Platform, or Java keystores. 4. Start the server chassis \u00b6 Ensure the 3 files are in the same directory, and run: java -Dloader.path = . -jar server-chassis-spring-*.jar Explanation of the command The -Dloader.path=. indicates that the server chassis should look for any connectors in the current directory. If you wanted to instead place the connector in a separate location (for example /lib ), you could change the . to point to that other location ( -Dloader.path=/lib ). Output for server chassis startup Project Egeria - Open Metadata and Governance ____ __ ___ ___ ______ _____ ____ _ _ ___ / __ \\ / |/ // | / ____/ / ___/ ___ ____ _ __ ___ ____ / _ \\ / / __ / / / _ /__ ____ _ _ / / / // /|_/ // /| | / / __ \\__ \\ / _ \\ / __/| | / // _ \\ / __/ / /_/ // // | / _\\ / /_ / | / _// || | / /_/ // / / // ___ |/ /_/ / ___/ // __// / | |/ // __// / / __ // // / \\ / /_ / _// / // / / / / / \\____//_/ /_//_/ |_|\\____/ /____/ \\___//_/ |___/ \\___//_/ /_/ /_/ \\__/\\//___//_/ \\__//_/ /_/ /_/ :: Powered by Spring Boot (v2.5.0) :: 2021-07-14 11:20:03.855 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9443 (https) 2021-07-14 11:20:30.683 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9443 (https) with context path '' Wed Jul 14 11:20:13 GMT 2021 No OMAG servers listed in startup configuration Wed Jul 14 11:20:30 GMT 2021 OMAG server platform ready for more configuration Wait for these two final lines of output to appear before proceeding {timestamp} No OMAG servers listed in startup configuration {timestamp} OMAG server platform ready for more configuration These final two lines of output indicate that the server chassis has completed starting up and is now ready to be configured. Any attempt to configure the server chassis before these lines are output is likely to result in failures. You are now ready to configure the connectors themselves.","title":"Setup"},{"location":"getting-started/common/#common-setup-steps","text":"Regardless of whether you are configuring the IBM Information Governance Catalog adapter or the DataStage adapter (or both), there are a number of initial steps that are common.","title":"Common setup steps"},{"location":"getting-started/common/#1-obtain-connector","text":"Start by downloading the IBM Information Server connectors: Latest release Latest snapshot The connector is: egeria-connector-ibm-information-server-package-{version}-jar-with-dependencies.jar","title":"1. Obtain connector"},{"location":"getting-started/common/#2-obtain-server-chassis","text":"Download Egeria's server chassis: Latest release Latest snapshot The connector version indicates the minimum required Egeria version The server chassis is: server-chassis-spring-{version}.jar","title":"2. Obtain server chassis"},{"location":"getting-started/common/#3-configure-security","text":"To get an initial environment up-and-running just download the truststore.p12 file from: https://github.com/odpi/egeria/raw/master/truststore.p12 . Transport-level security The truststore.p12 file provides a local truststore for Java. This allows the self-signed certificate embedded within the server chassis (by default) to be trusted. Without this trust, interactions with the server chassis (such as the REST calls that are made through Java to handle interaction between the chassis and the connector) will result in an SSLHandshakeException . While this truststore.p12 file allows SSL-encrypted communication, the fact that it relies on a self-signed certificate means that there is no independent source of trust in the interactions (which would typically be achieved through an independent Certificate Authority). Additional details on TLS for Egeria can be found in the Egeria documentation . While the truststore.p12 file sets up TLS for Egeria itself, there is also the communication between the connector and the IBM Information Server environment to consider. One of the following options must be chosen when configuring the connector:","title":"3. Configure security"},{"location":"getting-started/common/#disable-ssl-for-ibm-information-server","text":"The simplest method to configure this layer of the transport is to disable SSL verification itself, which you can do by exporting the environment variable STRICT_SSL=false or passing the argument -Dstrict.ssl=false to the java command when running the server chassis. Insecure Both of these effectively disable security by disabling SSL verification. While this is likely acceptable for some development or testing purposes, it is not recommended for production usage. For more robust (albeit also more cumbersome) approaches see the further details on other options below.","title":"Disable SSL for IBM Information Server"},{"location":"getting-started/common/#configure-ssl-for-ibm-information-server","text":"","title":"Configure SSL for IBM Information Server"},{"location":"getting-started/common/#configure-java-keystore","text":"With this approach you can tell Java to trust the certificate of one or more systems, even when those systems only have self-signed certificates. Somewhat secure This is more secure than entirely disabling SSL verification, as it provides a sort of whitelist for certificates to trust; however, it does not rely on an independent party to verify that trust. Done without proper diligence, there is therefore still some risk in this approach. Begin by obtaining the self-signed certificate of the IGC host (from any machine with a JVM: could be the Egeria OMAG Server Platform so long as you're confident it is reaching the correct host): keytool -printcert -sslserver my.igc.host.com:9446 -rfc > infosvr_self_signed.crt Hostname must match Note that you need to use the correct hostname and port number of the domain (services) tier of your environment. This means the hostname by which that server knows itself -- it should not be an IP address. Next, import the certificate into the Java keystore used by the environment. For example, in an Alpine openjdk docker image, this would be /etc/ssl/certs/java/cacerts : keytool -trustcacerts -keystore /etc/ssl/certs/java/cacerts -storepass changeit -noprompt -alias my.igc.host.com -importcert -file infosvr_self_signed.crt rm infosvr_self_signed.crt Explanation of the command The keystore location should be specified, and it is best to use the one for the environment itself (if a user-specific keystore it will likely depend on the user under which the JVM itself is running whether it is picked up or not). The default keystore password in Java is changeit ; obviously replace this with the password for your actual keystore if it has been changed... (Both the -storepass and -noprompt can be skipped if you would rather be prompted for the password and confirmation of importing the certificate.) The -alias should be specified and must match the hostname of the IGC machine itself (the services tier host): if different, the certificate won't match and won't be validated.","title":"Configure Java keystore"},{"location":"getting-started/common/#use-an-independent-certificate-authority-ca","text":"This approach relies on a third party (a \"certificate authority\") to sign the certificates to be used by your environments, and leverages inherent trust in these third parties in order to validate such signed certificates automatically. Most secure This approach is generally accepted as the most robust and secure. However, this option also relies on obtaining (typically at a cost) such certificate signatures, and updating the configuration of your system(s) to leverage these new signed certificates rather than the self-signed certificates they possess by default. More information on doing this specifically for IBM Information Server can be found in IBM's Knowledge Center . After configuring such a signed certificate, you should be able to connect to the IBM environment without any further configuration of either the connector, OMAG Server Platform, or Java keystores.","title":"Use an independent certificate authority (CA)"},{"location":"getting-started/common/#4-start-the-server-chassis","text":"Ensure the 3 files are in the same directory, and run: java -Dloader.path = . -jar server-chassis-spring-*.jar Explanation of the command The -Dloader.path=. indicates that the server chassis should look for any connectors in the current directory. If you wanted to instead place the connector in a separate location (for example /lib ), you could change the . to point to that other location ( -Dloader.path=/lib ). Output for server chassis startup Project Egeria - Open Metadata and Governance ____ __ ___ ___ ______ _____ ____ _ _ ___ / __ \\ / |/ // | / ____/ / ___/ ___ ____ _ __ ___ ____ / _ \\ / / __ / / / _ /__ ____ _ _ / / / // /|_/ // /| | / / __ \\__ \\ / _ \\ / __/| | / // _ \\ / __/ / /_/ // // | / _\\ / /_ / | / _// || | / /_/ // / / // ___ |/ /_/ / ___/ // __// / | |/ // __// / / __ // // / \\ / /_ / _// / // / / / / / \\____//_/ /_//_/ |_|\\____/ /____/ \\___//_/ |___/ \\___//_/ /_/ /_/ \\__/\\//___//_/ \\__//_/ /_/ /_/ :: Powered by Spring Boot (v2.5.0) :: 2021-07-14 11:20:03.855 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9443 (https) 2021-07-14 11:20:30.683 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9443 (https) with context path '' Wed Jul 14 11:20:13 GMT 2021 No OMAG servers listed in startup configuration Wed Jul 14 11:20:30 GMT 2021 OMAG server platform ready for more configuration Wait for these two final lines of output to appear before proceeding {timestamp} No OMAG servers listed in startup configuration {timestamp} OMAG server platform ready for more configuration These final two lines of output indicate that the server chassis has completed starting up and is now ready to be configured. Any attempt to configure the server chassis before these lines are output is likely to result in failures. You are now ready to configure the connectors themselves.","title":"4. Start the server chassis"},{"location":"getting-started/datastage/","text":"DataStage Adapter \u00b6 The DataStage proxy connects an IBM DataStage environment (via Information Governance Catalog) to an Egeria Data Engine OMAS . Ensure you have already completed the Setup steps before proceeding. 5. Configure the connector \u00b6 a. Configure the OMAS \u00b6 Egeria's OMAS 's provide a set of typically more coarse-grained services through which specific consumers or producers of metadata can directly integrate. For DataStage, by implementing a data engine proxy, we are integrating through the Data Engine OMAS of Egeria. This allows the integration to submit a large number of objects together in a single request rather than the more fine-grained services of a repository connector (which would typically require many fine-grained requests). i. Set OMAS repository \u00b6 curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/local-repository/mode/local-graph-repository\" Detailed explanation OMAS 's need to be configured with a local repository, in this example we are configuring the server where we will enable the Data Engine OMAS with Egeria's built-in graph repository. Response from OMAS repository configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } ii. Configure the event bus \u00b6 curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"producer\":{\"bootstrap.servers\":\"localhost:9092\"},\"consumer\":{\"bootstrap.servers\":\"localhost:9092\"}}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/event-bus?connectorProvider=org.odpi.openmetadata.adapters.eventbus.topic.kafka.KafkaOpenMetadataTopicProvider\" Detailed explanation The event bus is how Egeria coordinates communication amongst its various servers and repositories: for example, ensuring that any new type definitions are registered with each repository capable of handling them, notifying other repositories when the metadata in one repository changes, etc. The URL parameter connectorProvider defines the type of event bus to use (in this case Apache Kafka). The JSON payload gives details about how to connect to Apache Kafka, in this case assuming it is running on local machine ( localhost ) on its default port ( 9092 ). Response from event bus configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } iii. Enable OMAS 's \u00b6 curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/access-services?serviceMode=ENABLED\" Detailed explanation This call enables the access services that the omas_server should run: for simplicity here we are enabling all of the access services. This ensures that the Data Engine OMAS will be running and available for the DataStage connector to communicate any metadata through. Response from enabling OMAS 's { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } b. Configure DataStage connector \u00b6 i. Set repository \u00b6 curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/datastage_proxy/local-repository/mode/in-memory-repository\" Detailed explanation Just like any other server, we configure the persistence (if any) of the DataStage connector itself. In this example, we are configuring the in-memory-repository , so in fact will not have any persistence for the DataStage connector. For this connector, this is fine since our persistence is actually handled through the Data Engine OMAS rather than through this connector itself. Response from connector repository configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } ii. Configure connector \u00b6 curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"class\":\"DataEngineProxyConfig\",\"accessServiceRootURL\":\"https://localhost:9443\",\"accessServiceServerName\":\"omas_server\",\"dataEngineConnection\":{\"class\":\"Connection\",\"connectorType\":{\"class\":\"ConnectorType\",\"connectorProviderClassName\":\"org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider\"},\"endpoint\":{\"class\":\"Endpoint\",\"address\":\"infosvr:9446\",\"protocol\":\"https\"},\"userId\":\"isadmin\",\"clearPassword\":\"isadmin\"},\"pollIntervalInSeconds\":60}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/datastage_proxy/data-engine-proxy-service/configuration\" Detailed explanation The JSON payload's contents define how this connector itself should be configured: specifically, which Java class should be used. Here we can see the payload refers to the DataStageConnectorProvider , which therefore tells the proxy to use this class -- specific to the DataStage connector -- in order to configure its connectivity to DataStage as a data engine. Response from connector configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } Be sure to replace hostname and credential information If copy / pasting the command above, be sure to replace the hostname and credential information with the appropriate settings for your own environment before running it. Required user permissions To operate, the Information Server user credentials must have (at a minimum) the following roles: Suite User Information Governance Catalog User Information Governance Catalog Glossary Author Information Governance Catalog Asset Administrator (v11.7+) Information Governance Catalog Information Asset Author (when includeVirtualAssets is set to true) Detailed explanation The first two are both read-only, non-administrative roles, while the last allows synchronization objects to be created to track the last synchronization point of the DataStage job information. For v11.7 and above, the Information Governance Catalog Asset Administrator role is necessary to automate the detection of lineage within IGC , prior to having a complete set of lineage for the DataStage connector itself to retrieve. (This is a necessary step to avoid potential race conditions between lineage being fully calculated within IGC and the DataStage connector polling for the lineage information.) The Information Governance Catalog Information Asset Author role is needed to be able to retrieve the full details of virtual assets. 6. Start the server instances \u00b6 curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/instance\" curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/datastage_proxy/instance\" Detailed explanation Up to this point we have only configured the connector, but have not actually started it. These final API calls tell Egeria to start the servers needed: first for the OMAS 's to which the connector will communicate, and second to start the connector itself. Response from server instances startup { \"class\" : \"SuccessMessageResponse\" , \"relatedHTTPCode\" : 200 , \"successMessage\" : \"Thu Mar 11 12:54:46 GMT 2021 omas_server is running the following services: [Open Metadata Repository Services (OMRS), Connected Asset Services, Digital Service OMAS, Data Manager OMAS, Subject Area OMAS, Design Model OMAS, Glossary View OMAS, Asset Manager OMAS, Security Officer OMAS, IT Infrastructure OMAS, Data Science OMAS, Community Profile OMAS, Discovery Engine OMAS, Data Engine OMAS, Digital Architecture OMAS, Asset Owner OMAS, Stewardship Action OMAS, Governance Program OMAS, Asset Lineage OMAS, Analytics Modeling OMAS, Asset Consumer OMAS, Asset Catalog OMAS, DevOps OMAS, Software Developer OMAS, Project Management OMAS, Governance Engine OMAS, Data Privacy OMAS]\" } It may take 10-15 seconds to complete, but the first response above indicates that the Egeria OMAS 's are now running. { \"class\" : \"SuccessMessageResponse\" , \"relatedHTTPCode\" : 200 , \"successMessage\" : \"Thu Mar 11 13:07:35 GMT 2021 datastage_proxy is running the following services: [Open Metadata Repository Services (OMRS), Data Engine Proxy Services]\" } After another 10-15 seconds to complete, the example response above indicates that the DataStage connector instance is now running. Other startup information of potential interest Back in the console where the server chassis is running, you should see the audit log printing out a large amount of information as the startup is running. Most of this is related to the registration of type definition details with the repository. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 Project Egeria - Open Metadata and Governance ____ __ ___ ___ ______ _____ ____ _ _ ___ / __ \\ / |/ // | / ____/ / ___/ ___ ____ _ __ ___ ____ / _ \\ / / __ / / / _ /__ ____ _ _ / / / // /|_/ // /| | / / __ \\__ \\ / _ \\ / __/| | / // _ \\ / __/ / /_/ // // | / _\\ / /_ / | / _// || | / /_/ // / / // ___ |/ /_/ / ___/ // __// / | |/ // __// / / __ // // / \\ / /_ / _// / // / / / / / \\____//_/ /_//_/ |_|\\____/ /____/ \\___//_/ |___/ \\___//_/ /_/ /_/ \\__/\\//___//_/ \\__//_/ /_/ /_/ :: Powered by Spring Boot (v2.5.0) :: 2021-07-14 17:26:56.049 INFO 48498 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9443 (https) 2021-07-14 17:27:07.599 INFO 48498 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9443 (https) with context path '' Wed Jul 14 17:26:58 BST 2021 No OMAG servers listed in startup configuration Wed Jul 14 17:27:07 BST 2021 OMAG server platform ready for more configuration Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0064 The Open Metadata Repository Services (OMRS) has initialized the audit log for the Metadata Server called omas_server Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMAG-ADMIN-0001 The omas_server server is configured with a max page size of 1000 Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0001 The Open Metadata Repository Services (OMRS) is initializing the subsystems to support a new server Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0002 Enterprise access through the Enterprise Repository Services is initializing Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0003 The local repository is initializing the metadata collection named omas_server with an id of 68616f45-6fb0-4e6a-8088-9de62d0d69ba Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0029 The local repository outbound event manager is initializing Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0030 Registering the Local Repository to Enterprise event consumer with the local repository outbound event manager Wed Jul 14 17:29:46 BST 2021 omas_server Information OMRS-GRAPH-REPOSITORY-0001 The OMRS Graph Repository has been created. Wed Jul 14 17:29:47 BST 2021 omas_server Information OMRS-AUDIT-0050 The Open Metadata Repository Services (OMRS) is about to process open metadata archive Open Metadata Types Wed Jul 14 17:29:47 BST 2021 omas_server Types OMRS-AUDIT-0301 The local server has added a new type called object with a unique identifier of 1c4b21f4-0b67-41a7-a6ed-2af185eb9b3b and a version number of 1 from Egeria (2.11) ... Wed Jul 14 17:29:53 BST 2021 omas_server Types OMRS-AUDIT-0303 The local server has updated an existing type called APIOperation with a unique identifier of f1c0af19-2729-4fac-996e-a7badff3c21c to version number of 2 using a patch from Egeria (2.11) Wed Jul 14 17:29:53 BST 2021 omas_server Information OMRS-AUDIT-0053 The Open Metadata Repository Services (OMRS) has processed 766 types and 0 instances from open metadata archive Open Metadata Types Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0040 An enterprise OMRS connector has been created for the Repository REST Services Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0041 The enterprise OMRS connector for the Repository REST Services has started Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0007 The Open Metadata Repository Services (OMRS) has initialized Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0031 The local repository outbound event manager is starting with 1 type definition event consumer(s) and 1 instance event consumer(s) Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0032 The local repository outbound event manager is sending out the 766 type definition events that were generated and buffered during server initialization Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0040 An enterprise OMRS connector has been created for the Connected Asset Services Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0041 The enterprise OMRS connector for the Connected Asset Services has started Wed Jul 14 17:29:53 BST 2021 omas_server Startup OCF-METADATA-MANAGEMENT-0001 The Open Connector Framework (OCF) Metadata Management Service is initializing a new server instance Wed Jul 14 17:29:53 BST 2021 omas_server Startup OCF-METADATA-MANAGEMENT-0003 The Open Connector Framework (OCF) Metadata Management Service has initialized a new instance for server omas_server Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMAG-ADMIN-0010 The Open Metadata Access Services (OMASs) are starting ... Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMRS-AUDIT-0040 An enterprise OMRS connector has been created for the Data Engine OMAS Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMRS-AUDIT-0041 The enterprise OMRS connector for the Data Engine OMAS has started Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMAS-DATA-ENGINE-0001 The Data Engine Open Metadata Access Service (OMAS) is initializing a new server instance Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0001 Connecting to Apache Kafka Topic egeria.omag.server.omas_server.omas.dataengine.inTopic with a server identifier of 862ec1dd-97a0-4eed-936b-22a341cccbe8 Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0015 The local server is attempting to connect to Kafka, attempt 1 Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0003 10 properties passed to the Apache Kafka Consumer for topic egeria.omag.server.omas_server.omas.dataengine.inTopic Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0002 10 properties passed to the Apache Kafka Producer for topic egeria.omag.server.omas_server.omas.dataengine.inTopic Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMAS-DATA-ENGINE-0002 The Data Engine Open Metadata Access Service (OMAS) has initialized a new instance for server omas_server Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0010 The Apache Kafka producer for topic egeria.omag.server.omas_server.omas.dataengine.inTopic is starting up with 0 buffered messages Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMRS-AUDIT-0015 The listener thread for an OMRS Topic Connector for topic egeria.omag.server.omas_server.omas.dataengine.inTopic has started ... Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMAG-ADMIN-0012 26 out of 26 configured Open Metadata Access Services (OMASs) have started. Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMRS-AUDIT-0019 An OMRS Topic Connector has registered with an event bus connector for topic omas_server.openmetadata.repositoryservices.enterprise.omas_server.OMRSTopic Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMRS-AUDIT-0020 An OMRS Topic Connector is ready to send and receive events on topic omas_server.openmetadata.repositoryservices.enterprise.omas_server.OMRSTopic Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMAG-ADMIN-0004 The omas_server server has successfully completed start up. The following services are running: [Open Metadata Repository Services (OMRS), Connected Asset Services, Digital Service OMAS, Data Manager OMAS, Subject Area OMAS, Design Model OMAS, Glossary View OMAS, Asset Manager OMAS, Security Officer OMAS, IT Infrastructure OMAS, Data Science OMAS, Community Profile OMAS, Discovery Engine OMAS, Data Engine OMAS, Digital Architecture OMAS, Asset Owner OMAS, Stewardship Action OMAS, Governance Program OMAS, Asset Lineage OMAS, Analytics Modeling OMAS, Asset Consumer OMAS, Asset Catalog OMAS, DevOps OMAS, Software Developer OMAS, Project Management OMAS, Governance Engine OMAS, Data Privacy OMAS, Security Manager OMAS] Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMRS-AUDIT-0015 The listener thread for an OMRS Topic Connector for topic omas_server.openmetadata.repositoryservices.enterprise.omas_server.OMRSTopic has started Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMRS-AUDIT-0064 The Open Metadata Repository Services (OMRS) has initialized the audit log for the Data Engine Proxy called datastage_proxy Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMAG-ADMIN-0001 The datastage_proxy server is configured with a max page size of 1000 Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMRS-AUDIT-0001 The Open Metadata Repository Services (OMRS) is initializing the subsystems to support a new server Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMRS-AUDIT-0007 The Open Metadata Repository Services (OMRS) has initialized Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMAG-ADMIN-0100 The governance services subsystem for the Data Engine Proxy called datastage_proxy is about to start Wed Jul 14 17:38:29 BST 2021 datastage_proxy Information DATA-ENGINE-PROXY-0001 The Data Engine Proxy is initializing a new server instance Wed Jul 14 17:38:32 BST 2021 datastage_proxy Information DATA-ENGINE-PROXY-0006 The Data Engine Proxy is initializing polling for changes Wed Jul 14 17:38:33 BST 2021 datastage_proxy Information DATA-ENGINE-PROXY-0005 The Data Engine Proxy has initialized a new instance for server org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider Wed Jul 14 17:38:33 BST 2021 datastage_proxy Startup OMAG-ADMIN-0101 The governance services subsystem for the Data Engine Proxy called datastage_proxy has completed start up Wed Jul 14 17:38:33 BST 2021 datastage_proxy Startup OMAG-ADMIN-0004 The datastage_proxy server has successfully completed start up. The following services are running: [Open Metadata Repository Services (OMRS), Data Engine Proxy Services] These lines indicate that the Data Engine OMAS has been configured and started up, and the DataStage proxy has also been started. Connector options \u00b6 There are currently five configuration options for the connector itself: Option Description pageSize An integer giving the number of results to include in each page of processing. includeVirtualAssets A boolean that indicates whether to include the creation of schemas for virtual assets (when true) or not (when false). createDataStoreSchemas A boolean that indicates whether to include the creation of data store-level schemas (when true) or not (when false). When the DataStage connector is used alone in a cohort, without an IGC proxy also running in the cohort, this should be set to true to ensure that the data stores used as sources or targets by DataStage exist in lineage. If an IGC proxy is also being used in the cohort, this should be left at the default value (false) to ensure that the IGC proxy remains the home metadata collection of data store entities. limitToProjects A list of projects to which any lineage information should be limited. When not specified, all projects will be included. When specified, only jobs within those projects will be included. limitToLineageEnabledJobs A boolean that indicates if the connector should only process lineage-enabled jobs. If this is set to true then only jobs having include_for_lineage set to true will be processed for lineage information. Example configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"class\" : \"DataEngineProxyConfig\" , \"accessServiceRootURL\" : \"https://localhost:9443\" , \"accessServiceServerName\" : \"omas_server\" , \"dataEngineConnection\" : { \"class\" : \"Connection\" , \"connectorType\" : { \"class\" : \"ConnectorType\" , \"connectorProviderClassName\" : \"org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider\" }, \"endpoint\" : { \"class\" : \"Endpoint\" , \"address\" : \"infosvr:9446\" , \"protocol\" : \"https\" }, \"userId\" : \"isadmin\" , \"clearPassword\" : \"isadmin\" , \"configurationProperties\" : { \"pageSize\" : 100 , \"includeVirtualAssets\" : true , \"createDataStoreSchemas\" : false , \"limitToProjects\" : [], \"limitToLineageEnabledJobs\" : false } }, \"pollIntervalInSeconds\" : 60 } Details about how to connect to both the Data Engine OMAS and the IBM Information Server environment must also be provided in the connection's configuration: the URL and name of the OMAS server running within either this or another Egeria OMAG Server Platform (server chassis) the endpoint details covering the hostname and port of the Information Server environment's domain (services) tier, and the username and password through which we can access its REST APIs For the additional options, if no values are provided in the configuration of the connector they will automatically default to the values given above.","title":"DataStage Adapter"},{"location":"getting-started/datastage/#datastage-adapter","text":"The DataStage proxy connects an IBM DataStage environment (via Information Governance Catalog) to an Egeria Data Engine OMAS . Ensure you have already completed the Setup steps before proceeding.","title":"DataStage Adapter"},{"location":"getting-started/datastage/#5-configure-the-connector","text":"","title":"5. Configure the connector"},{"location":"getting-started/datastage/#a-configure-the-omas","text":"Egeria's OMAS 's provide a set of typically more coarse-grained services through which specific consumers or producers of metadata can directly integrate. For DataStage, by implementing a data engine proxy, we are integrating through the Data Engine OMAS of Egeria. This allows the integration to submit a large number of objects together in a single request rather than the more fine-grained services of a repository connector (which would typically require many fine-grained requests).","title":"a. Configure the OMAS"},{"location":"getting-started/datastage/#i-set-omas-repository","text":"curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/local-repository/mode/local-graph-repository\" Detailed explanation OMAS 's need to be configured with a local repository, in this example we are configuring the server where we will enable the Data Engine OMAS with Egeria's built-in graph repository. Response from OMAS repository configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 }","title":"i. Set OMAS repository"},{"location":"getting-started/datastage/#ii-configure-the-event-bus","text":"curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"producer\":{\"bootstrap.servers\":\"localhost:9092\"},\"consumer\":{\"bootstrap.servers\":\"localhost:9092\"}}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/event-bus?connectorProvider=org.odpi.openmetadata.adapters.eventbus.topic.kafka.KafkaOpenMetadataTopicProvider\" Detailed explanation The event bus is how Egeria coordinates communication amongst its various servers and repositories: for example, ensuring that any new type definitions are registered with each repository capable of handling them, notifying other repositories when the metadata in one repository changes, etc. The URL parameter connectorProvider defines the type of event bus to use (in this case Apache Kafka). The JSON payload gives details about how to connect to Apache Kafka, in this case assuming it is running on local machine ( localhost ) on its default port ( 9092 ). Response from event bus configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 }","title":"ii. Configure the event bus"},{"location":"getting-started/datastage/#iii-enable-omass","text":"curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/access-services?serviceMode=ENABLED\" Detailed explanation This call enables the access services that the omas_server should run: for simplicity here we are enabling all of the access services. This ensures that the Data Engine OMAS will be running and available for the DataStage connector to communicate any metadata through. Response from enabling OMAS 's { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 }","title":"iii. Enable OMAS's"},{"location":"getting-started/datastage/#b-configure-datastage-connector","text":"","title":"b. Configure DataStage connector"},{"location":"getting-started/datastage/#i-set-repository","text":"curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/datastage_proxy/local-repository/mode/in-memory-repository\" Detailed explanation Just like any other server, we configure the persistence (if any) of the DataStage connector itself. In this example, we are configuring the in-memory-repository , so in fact will not have any persistence for the DataStage connector. For this connector, this is fine since our persistence is actually handled through the Data Engine OMAS rather than through this connector itself. Response from connector repository configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 }","title":"i. Set repository"},{"location":"getting-started/datastage/#ii-configure-connector","text":"curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"class\":\"DataEngineProxyConfig\",\"accessServiceRootURL\":\"https://localhost:9443\",\"accessServiceServerName\":\"omas_server\",\"dataEngineConnection\":{\"class\":\"Connection\",\"connectorType\":{\"class\":\"ConnectorType\",\"connectorProviderClassName\":\"org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider\"},\"endpoint\":{\"class\":\"Endpoint\",\"address\":\"infosvr:9446\",\"protocol\":\"https\"},\"userId\":\"isadmin\",\"clearPassword\":\"isadmin\"},\"pollIntervalInSeconds\":60}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/datastage_proxy/data-engine-proxy-service/configuration\" Detailed explanation The JSON payload's contents define how this connector itself should be configured: specifically, which Java class should be used. Here we can see the payload refers to the DataStageConnectorProvider , which therefore tells the proxy to use this class -- specific to the DataStage connector -- in order to configure its connectivity to DataStage as a data engine. Response from connector configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } Be sure to replace hostname and credential information If copy / pasting the command above, be sure to replace the hostname and credential information with the appropriate settings for your own environment before running it. Required user permissions To operate, the Information Server user credentials must have (at a minimum) the following roles: Suite User Information Governance Catalog User Information Governance Catalog Glossary Author Information Governance Catalog Asset Administrator (v11.7+) Information Governance Catalog Information Asset Author (when includeVirtualAssets is set to true) Detailed explanation The first two are both read-only, non-administrative roles, while the last allows synchronization objects to be created to track the last synchronization point of the DataStage job information. For v11.7 and above, the Information Governance Catalog Asset Administrator role is necessary to automate the detection of lineage within IGC , prior to having a complete set of lineage for the DataStage connector itself to retrieve. (This is a necessary step to avoid potential race conditions between lineage being fully calculated within IGC and the DataStage connector polling for the lineage information.) The Information Governance Catalog Information Asset Author role is needed to be able to retrieve the full details of virtual assets.","title":"ii. Configure connector"},{"location":"getting-started/datastage/#6-start-the-server-instances","text":"curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/omas_server/instance\" curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/datastage_proxy/instance\" Detailed explanation Up to this point we have only configured the connector, but have not actually started it. These final API calls tell Egeria to start the servers needed: first for the OMAS 's to which the connector will communicate, and second to start the connector itself. Response from server instances startup { \"class\" : \"SuccessMessageResponse\" , \"relatedHTTPCode\" : 200 , \"successMessage\" : \"Thu Mar 11 12:54:46 GMT 2021 omas_server is running the following services: [Open Metadata Repository Services (OMRS), Connected Asset Services, Digital Service OMAS, Data Manager OMAS, Subject Area OMAS, Design Model OMAS, Glossary View OMAS, Asset Manager OMAS, Security Officer OMAS, IT Infrastructure OMAS, Data Science OMAS, Community Profile OMAS, Discovery Engine OMAS, Data Engine OMAS, Digital Architecture OMAS, Asset Owner OMAS, Stewardship Action OMAS, Governance Program OMAS, Asset Lineage OMAS, Analytics Modeling OMAS, Asset Consumer OMAS, Asset Catalog OMAS, DevOps OMAS, Software Developer OMAS, Project Management OMAS, Governance Engine OMAS, Data Privacy OMAS]\" } It may take 10-15 seconds to complete, but the first response above indicates that the Egeria OMAS 's are now running. { \"class\" : \"SuccessMessageResponse\" , \"relatedHTTPCode\" : 200 , \"successMessage\" : \"Thu Mar 11 13:07:35 GMT 2021 datastage_proxy is running the following services: [Open Metadata Repository Services (OMRS), Data Engine Proxy Services]\" } After another 10-15 seconds to complete, the example response above indicates that the DataStage connector instance is now running. Other startup information of potential interest Back in the console where the server chassis is running, you should see the audit log printing out a large amount of information as the startup is running. Most of this is related to the registration of type definition details with the repository. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 Project Egeria - Open Metadata and Governance ____ __ ___ ___ ______ _____ ____ _ _ ___ / __ \\ / |/ // | / ____/ / ___/ ___ ____ _ __ ___ ____ / _ \\ / / __ / / / _ /__ ____ _ _ / / / // /|_/ // /| | / / __ \\__ \\ / _ \\ / __/| | / // _ \\ / __/ / /_/ // // | / _\\ / /_ / | / _// || | / /_/ // / / // ___ |/ /_/ / ___/ // __// / | |/ // __// / / __ // // / \\ / /_ / _// / // / / / / / \\____//_/ /_//_/ |_|\\____/ /____/ \\___//_/ |___/ \\___//_/ /_/ /_/ \\__/\\//___//_/ \\__//_/ /_/ /_/ :: Powered by Spring Boot (v2.5.0) :: 2021-07-14 17:26:56.049 INFO 48498 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9443 (https) 2021-07-14 17:27:07.599 INFO 48498 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9443 (https) with context path '' Wed Jul 14 17:26:58 BST 2021 No OMAG servers listed in startup configuration Wed Jul 14 17:27:07 BST 2021 OMAG server platform ready for more configuration Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0064 The Open Metadata Repository Services (OMRS) has initialized the audit log for the Metadata Server called omas_server Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMAG-ADMIN-0001 The omas_server server is configured with a max page size of 1000 Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0001 The Open Metadata Repository Services (OMRS) is initializing the subsystems to support a new server Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0002 Enterprise access through the Enterprise Repository Services is initializing Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0003 The local repository is initializing the metadata collection named omas_server with an id of 68616f45-6fb0-4e6a-8088-9de62d0d69ba Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0029 The local repository outbound event manager is initializing Wed Jul 14 17:29:44 BST 2021 omas_server Startup OMRS-AUDIT-0030 Registering the Local Repository to Enterprise event consumer with the local repository outbound event manager Wed Jul 14 17:29:46 BST 2021 omas_server Information OMRS-GRAPH-REPOSITORY-0001 The OMRS Graph Repository has been created. Wed Jul 14 17:29:47 BST 2021 omas_server Information OMRS-AUDIT-0050 The Open Metadata Repository Services (OMRS) is about to process open metadata archive Open Metadata Types Wed Jul 14 17:29:47 BST 2021 omas_server Types OMRS-AUDIT-0301 The local server has added a new type called object with a unique identifier of 1c4b21f4-0b67-41a7-a6ed-2af185eb9b3b and a version number of 1 from Egeria (2.11) ... Wed Jul 14 17:29:53 BST 2021 omas_server Types OMRS-AUDIT-0303 The local server has updated an existing type called APIOperation with a unique identifier of f1c0af19-2729-4fac-996e-a7badff3c21c to version number of 2 using a patch from Egeria (2.11) Wed Jul 14 17:29:53 BST 2021 omas_server Information OMRS-AUDIT-0053 The Open Metadata Repository Services (OMRS) has processed 766 types and 0 instances from open metadata archive Open Metadata Types Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0040 An enterprise OMRS connector has been created for the Repository REST Services Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0041 The enterprise OMRS connector for the Repository REST Services has started Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0007 The Open Metadata Repository Services (OMRS) has initialized Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0031 The local repository outbound event manager is starting with 1 type definition event consumer(s) and 1 instance event consumer(s) Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0032 The local repository outbound event manager is sending out the 766 type definition events that were generated and buffered during server initialization Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0040 An enterprise OMRS connector has been created for the Connected Asset Services Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMRS-AUDIT-0041 The enterprise OMRS connector for the Connected Asset Services has started Wed Jul 14 17:29:53 BST 2021 omas_server Startup OCF-METADATA-MANAGEMENT-0001 The Open Connector Framework (OCF) Metadata Management Service is initializing a new server instance Wed Jul 14 17:29:53 BST 2021 omas_server Startup OCF-METADATA-MANAGEMENT-0003 The Open Connector Framework (OCF) Metadata Management Service has initialized a new instance for server omas_server Wed Jul 14 17:29:53 BST 2021 omas_server Startup OMAG-ADMIN-0010 The Open Metadata Access Services (OMASs) are starting ... Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMRS-AUDIT-0040 An enterprise OMRS connector has been created for the Data Engine OMAS Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMRS-AUDIT-0041 The enterprise OMRS connector for the Data Engine OMAS has started Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMAS-DATA-ENGINE-0001 The Data Engine Open Metadata Access Service (OMAS) is initializing a new server instance Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0001 Connecting to Apache Kafka Topic egeria.omag.server.omas_server.omas.dataengine.inTopic with a server identifier of 862ec1dd-97a0-4eed-936b-22a341cccbe8 Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0015 The local server is attempting to connect to Kafka, attempt 1 Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0003 10 properties passed to the Apache Kafka Consumer for topic egeria.omag.server.omas_server.omas.dataengine.inTopic Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0002 10 properties passed to the Apache Kafka Producer for topic egeria.omag.server.omas_server.omas.dataengine.inTopic Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMAS-DATA-ENGINE-0002 The Data Engine Open Metadata Access Service (OMAS) has initialized a new instance for server omas_server Wed Jul 14 17:29:57 BST 2021 omas_server Startup OCF-KAFKA-TOPIC-CONNECTOR-0010 The Apache Kafka producer for topic egeria.omag.server.omas_server.omas.dataengine.inTopic is starting up with 0 buffered messages Wed Jul 14 17:29:57 BST 2021 omas_server Startup OMRS-AUDIT-0015 The listener thread for an OMRS Topic Connector for topic egeria.omag.server.omas_server.omas.dataengine.inTopic has started ... Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMAG-ADMIN-0012 26 out of 26 configured Open Metadata Access Services (OMASs) have started. Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMRS-AUDIT-0019 An OMRS Topic Connector has registered with an event bus connector for topic omas_server.openmetadata.repositoryservices.enterprise.omas_server.OMRSTopic Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMRS-AUDIT-0020 An OMRS Topic Connector is ready to send and receive events on topic omas_server.openmetadata.repositoryservices.enterprise.omas_server.OMRSTopic Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMAG-ADMIN-0004 The omas_server server has successfully completed start up. The following services are running: [Open Metadata Repository Services (OMRS), Connected Asset Services, Digital Service OMAS, Data Manager OMAS, Subject Area OMAS, Design Model OMAS, Glossary View OMAS, Asset Manager OMAS, Security Officer OMAS, IT Infrastructure OMAS, Data Science OMAS, Community Profile OMAS, Discovery Engine OMAS, Data Engine OMAS, Digital Architecture OMAS, Asset Owner OMAS, Stewardship Action OMAS, Governance Program OMAS, Asset Lineage OMAS, Analytics Modeling OMAS, Asset Consumer OMAS, Asset Catalog OMAS, DevOps OMAS, Software Developer OMAS, Project Management OMAS, Governance Engine OMAS, Data Privacy OMAS, Security Manager OMAS] Wed Jul 14 17:29:58 BST 2021 omas_server Startup OMRS-AUDIT-0015 The listener thread for an OMRS Topic Connector for topic omas_server.openmetadata.repositoryservices.enterprise.omas_server.OMRSTopic has started Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMRS-AUDIT-0064 The Open Metadata Repository Services (OMRS) has initialized the audit log for the Data Engine Proxy called datastage_proxy Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMAG-ADMIN-0001 The datastage_proxy server is configured with a max page size of 1000 Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMRS-AUDIT-0001 The Open Metadata Repository Services (OMRS) is initializing the subsystems to support a new server Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMRS-AUDIT-0007 The Open Metadata Repository Services (OMRS) has initialized Wed Jul 14 17:38:29 BST 2021 datastage_proxy Startup OMAG-ADMIN-0100 The governance services subsystem for the Data Engine Proxy called datastage_proxy is about to start Wed Jul 14 17:38:29 BST 2021 datastage_proxy Information DATA-ENGINE-PROXY-0001 The Data Engine Proxy is initializing a new server instance Wed Jul 14 17:38:32 BST 2021 datastage_proxy Information DATA-ENGINE-PROXY-0006 The Data Engine Proxy is initializing polling for changes Wed Jul 14 17:38:33 BST 2021 datastage_proxy Information DATA-ENGINE-PROXY-0005 The Data Engine Proxy has initialized a new instance for server org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider Wed Jul 14 17:38:33 BST 2021 datastage_proxy Startup OMAG-ADMIN-0101 The governance services subsystem for the Data Engine Proxy called datastage_proxy has completed start up Wed Jul 14 17:38:33 BST 2021 datastage_proxy Startup OMAG-ADMIN-0004 The datastage_proxy server has successfully completed start up. The following services are running: [Open Metadata Repository Services (OMRS), Data Engine Proxy Services] These lines indicate that the Data Engine OMAS has been configured and started up, and the DataStage proxy has also been started.","title":"6. Start the server instances"},{"location":"getting-started/datastage/#connector-options","text":"There are currently five configuration options for the connector itself: Option Description pageSize An integer giving the number of results to include in each page of processing. includeVirtualAssets A boolean that indicates whether to include the creation of schemas for virtual assets (when true) or not (when false). createDataStoreSchemas A boolean that indicates whether to include the creation of data store-level schemas (when true) or not (when false). When the DataStage connector is used alone in a cohort, without an IGC proxy also running in the cohort, this should be set to true to ensure that the data stores used as sources or targets by DataStage exist in lineage. If an IGC proxy is also being used in the cohort, this should be left at the default value (false) to ensure that the IGC proxy remains the home metadata collection of data store entities. limitToProjects A list of projects to which any lineage information should be limited. When not specified, all projects will be included. When specified, only jobs within those projects will be included. limitToLineageEnabledJobs A boolean that indicates if the connector should only process lineage-enabled jobs. If this is set to true then only jobs having include_for_lineage set to true will be processed for lineage information. Example configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"class\" : \"DataEngineProxyConfig\" , \"accessServiceRootURL\" : \"https://localhost:9443\" , \"accessServiceServerName\" : \"omas_server\" , \"dataEngineConnection\" : { \"class\" : \"Connection\" , \"connectorType\" : { \"class\" : \"ConnectorType\" , \"connectorProviderClassName\" : \"org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider\" }, \"endpoint\" : { \"class\" : \"Endpoint\" , \"address\" : \"infosvr:9446\" , \"protocol\" : \"https\" }, \"userId\" : \"isadmin\" , \"clearPassword\" : \"isadmin\" , \"configurationProperties\" : { \"pageSize\" : 100 , \"includeVirtualAssets\" : true , \"createDataStoreSchemas\" : false , \"limitToProjects\" : [], \"limitToLineageEnabledJobs\" : false } }, \"pollIntervalInSeconds\" : 60 } Details about how to connect to both the Data Engine OMAS and the IBM Information Server environment must also be provided in the connection's configuration: the URL and name of the OMAS server running within either this or another Egeria OMAG Server Platform (server chassis) the endpoint details covering the hostname and port of the Information Server environment's domain (services) tier, and the username and password through which we can access its REST APIs For the additional options, if no values are provided in the configuration of the connector they will automatically default to the values given above.","title":"Connector options"},{"location":"getting-started/explore/","text":"Explore \u00b6 You should now be able to start accessing metadata in IBM Information Server via Egeria. Without any additional dependencies, this is most easily illustrated using direct REST API interactions with the server chassis's repository services. Run a query \u00b6 Run a query for all terms in IGC that contain the word \"address\" in their name: curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"class\":\"EntityPropertyFindRequest\",\"typeGUID\":\"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\"pageSize\":10,\"matchCriteria\":\"ALL\",\"matchProperties\":{\"class\":\"InstanceProperties\",\"instanceProperties\":{\"displayName\":{\"class\":\"PrimitivePropertyValue\",\"instancePropertyCategory\":\"PRIMITIVE\",\"primitiveDefCategory\":\"OM_PRIMITIVE_TYPE_STRING\",\"primitiveValue\":\".*\\\\QAddress\\\\E.*\"}}}}' \\ \"https://localhost:9443/servers/igcproxy/open-metadata/repository-services/users/admin/instances/entities/by-property\" Explanation of the payload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"class\" : \"EntityPropertyFindRequest\" , \"typeGUID\" : \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\" , \"pageSize\" : 10 , \"matchCriteria\" : \"ALL\" , \"matchProperties\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"displayName\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \".*\\\\QAddress\\\\E.*\" } } } } The typeGUID parameter limits our search only to GlossaryTerm objects, while the matchProperties define which properties of the terms we should search (in this case, for any terms whose displayName contains precisely the case-sensitive string Address ). Response from search { \"class\" : \"EntityListResponse\" , \"relatedHTTPCode\" : 200 , \"offset\" : 0 , \"pageSize\" : 10 , \"entities\" : [ { \"class\" : \"EntityDetail\" , \"headerVersion\" : 1 , \"type\" : { \"class\" : \"InstanceType\" , \"typeDefCategory\" : \"ENTITY_DEF\" , \"typeDefGUID\" : \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\" , \"typeDefName\" : \"GlossaryTerm\" , \"typeDefVersion\" : 1 , \"typeDefDescription\" : \"A semantic description of something, such as a concept, object, asset, technology, role or group.\" , \"typeDefSuperTypes\" : [ { \"headerVersion\" : 1 , \"guid\" : \"a32316b8-dc8c-48c5-b12b-71c1b2a080bf\" , \"name\" : \"Referenceable\" , \"status\" : \"ACTIVE_TYPEDEF\" }, { \"headerVersion\" : 1 , \"guid\" : \"4e7761e8-3969-4627-8f40-bfe3cde85a1d\" , \"name\" : \"OpenMetadataRoot\" , \"status\" : \"ACTIVE_TYPEDEF\" } ], \"validInstanceProperties\" : [ \"qualifiedName\" , \"additionalProperties\" , \"displayName\" , \"summary\" , \"description\" , \"examples\" , \"abbreviation\" , \"usage\" ] }, \"instanceProvenanceType\" : \"LOCAL_COHORT\" , \"metadataCollectionId\" : \"5ce8e35a-2df3-409d-b085-bb64356407c8\" , \"metadataCollectionName\" : \"igcproxy\" , \"createdBy\" : \"Administrator IIS\" , \"updatedBy\" : \"Administrator IIS\" , \"maintainedBy\" : [ \"Administrator IIS\" ], \"createTime\" : \"2019-12-10T16:19:48.000+00:00\" , \"updateTime\" : \"2019-12-10T16:20:14.000+00:00\" , \"version\" : 1575994814000 , \"guid\" : \"term@5ce8e35a-2df3-409d-b085-bb64356407c8:6662c0f2.e1b1ec6c.00263sgva.eo5q0s7.o5rf5s.q22k66bdjh8h341n1hi1e\" , \"classifications\" : [ { \"class\" : \"Classification\" , \"headerVersion\" : 1 , \"type\" : { \"class\" : \"InstanceType\" , \"typeDefCategory\" : \"CLASSIFICATION_DEF\" , \"typeDefGUID\" : \"742ddb7d-9a4a-4eb5-8ac2-1d69953bd2b6\" , \"typeDefName\" : \"Confidentiality\" , \"typeDefVersion\" : 2 , \"typeDefDescription\" : \"Defines the level of confidentiality of related data items.\" , \"validInstanceProperties\" : [ \"notes\" , \"steward\" , \"level\" , \"confidence\" , \"source\" , \"status\" , \"levelIdentifier\" , \"confidentialityLevel\" ] }, \"instanceProvenanceType\" : \"LOCAL_COHORT\" , \"metadataCollectionId\" : \"5ce8e35a-2df3-409d-b085-bb64356407c8\" , \"metadataCollectionName\" : \"igcproxy\" , \"createdBy\" : \"Administrator IIS\" , \"updatedBy\" : \"Administrator IIS\" , \"maintainedBy\" : [ \"Administrator IIS\" ], \"createTime\" : \"2019-12-10T16:19:48.000+00:00\" , \"updateTime\" : \"2019-12-10T16:20:14.000+00:00\" , \"version\" : 1575994814000 , \"classificationOrigin\" : \"ASSIGNED\" , \"name\" : \"Confidentiality\" , \"properties\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"confidence\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"7fc49104-fd3a-46c8-b6bf-f16b6074cd35\" , \"typeName\" : \"int\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_INT\" , \"primitiveValue\" : 100 }, \"levelIdentifier\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"7fc49104-fd3a-46c8-b6bf-f16b6074cd35\" , \"typeName\" : \"int\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_INT\" , \"primitiveValue\" : 3 }, \"status\" : { \"class\" : \"EnumPropertyValue\" , \"instancePropertyCategory\" : \"ENUM\" , \"ordinal\" : 99 , \"symbolicName\" : \"Other\" , \"description\" : \"Another classification assignment status.\" } }, \"propertyNames\" : [ \"confidence\" , \"levelIdentifier\" , \"status\" ], \"propertyCount\" : 3 }, \"status\" : \"ACTIVE\" } ], \"properties\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"additionalProperties\" : { \"class\" : \"MapPropertyValue\" , \"instancePropertyCategory\" : \"MAP\" , \"mapValues\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"glossary_type\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"PUBLISHED\" }, \"is_modifier\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"false\" }, \"type\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"NONE\" }, \"status\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"ACCEPTED\" } }, \"propertyNames\" : [ \"glossary_type\" , \"is_modifier\" , \"type\" , \"status\" ], \"propertyCount\" : 4 }, \"mapElementCount\" : 4 }, \"displayName\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"Email Address\" }, \"qualifiedName\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"(category)=Coco Pharmaceuticals::(term)=Email Address\" } }, \"propertyNames\" : [ \"displayName\" , \"qualifiedName\" , \"additionalProperties\" ], \"propertyCount\" : 3 }, \"status\" : \"ACTIVE\" }, ... ] } Note that the results are returned in Egeria's type structure, as GlossaryTerm s with Classification s and so on. These are the same results that Egeria would see from IGC when running a federated query out to a cohort that is running the IGC proxy connector, and would therefore be able to combine with other metadata from other members of the cohort.","title":"Explore"},{"location":"getting-started/explore/#explore","text":"You should now be able to start accessing metadata in IBM Information Server via Egeria. Without any additional dependencies, this is most easily illustrated using direct REST API interactions with the server chassis's repository services.","title":"Explore"},{"location":"getting-started/explore/#run-a-query","text":"Run a query for all terms in IGC that contain the word \"address\" in their name: curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"class\":\"EntityPropertyFindRequest\",\"typeGUID\":\"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\"pageSize\":10,\"matchCriteria\":\"ALL\",\"matchProperties\":{\"class\":\"InstanceProperties\",\"instanceProperties\":{\"displayName\":{\"class\":\"PrimitivePropertyValue\",\"instancePropertyCategory\":\"PRIMITIVE\",\"primitiveDefCategory\":\"OM_PRIMITIVE_TYPE_STRING\",\"primitiveValue\":\".*\\\\QAddress\\\\E.*\"}}}}' \\ \"https://localhost:9443/servers/igcproxy/open-metadata/repository-services/users/admin/instances/entities/by-property\" Explanation of the payload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"class\" : \"EntityPropertyFindRequest\" , \"typeGUID\" : \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\" , \"pageSize\" : 10 , \"matchCriteria\" : \"ALL\" , \"matchProperties\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"displayName\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \".*\\\\QAddress\\\\E.*\" } } } } The typeGUID parameter limits our search only to GlossaryTerm objects, while the matchProperties define which properties of the terms we should search (in this case, for any terms whose displayName contains precisely the case-sensitive string Address ). Response from search { \"class\" : \"EntityListResponse\" , \"relatedHTTPCode\" : 200 , \"offset\" : 0 , \"pageSize\" : 10 , \"entities\" : [ { \"class\" : \"EntityDetail\" , \"headerVersion\" : 1 , \"type\" : { \"class\" : \"InstanceType\" , \"typeDefCategory\" : \"ENTITY_DEF\" , \"typeDefGUID\" : \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\" , \"typeDefName\" : \"GlossaryTerm\" , \"typeDefVersion\" : 1 , \"typeDefDescription\" : \"A semantic description of something, such as a concept, object, asset, technology, role or group.\" , \"typeDefSuperTypes\" : [ { \"headerVersion\" : 1 , \"guid\" : \"a32316b8-dc8c-48c5-b12b-71c1b2a080bf\" , \"name\" : \"Referenceable\" , \"status\" : \"ACTIVE_TYPEDEF\" }, { \"headerVersion\" : 1 , \"guid\" : \"4e7761e8-3969-4627-8f40-bfe3cde85a1d\" , \"name\" : \"OpenMetadataRoot\" , \"status\" : \"ACTIVE_TYPEDEF\" } ], \"validInstanceProperties\" : [ \"qualifiedName\" , \"additionalProperties\" , \"displayName\" , \"summary\" , \"description\" , \"examples\" , \"abbreviation\" , \"usage\" ] }, \"instanceProvenanceType\" : \"LOCAL_COHORT\" , \"metadataCollectionId\" : \"5ce8e35a-2df3-409d-b085-bb64356407c8\" , \"metadataCollectionName\" : \"igcproxy\" , \"createdBy\" : \"Administrator IIS\" , \"updatedBy\" : \"Administrator IIS\" , \"maintainedBy\" : [ \"Administrator IIS\" ], \"createTime\" : \"2019-12-10T16:19:48.000+00:00\" , \"updateTime\" : \"2019-12-10T16:20:14.000+00:00\" , \"version\" : 1575994814000 , \"guid\" : \"term@5ce8e35a-2df3-409d-b085-bb64356407c8:6662c0f2.e1b1ec6c.00263sgva.eo5q0s7.o5rf5s.q22k66bdjh8h341n1hi1e\" , \"classifications\" : [ { \"class\" : \"Classification\" , \"headerVersion\" : 1 , \"type\" : { \"class\" : \"InstanceType\" , \"typeDefCategory\" : \"CLASSIFICATION_DEF\" , \"typeDefGUID\" : \"742ddb7d-9a4a-4eb5-8ac2-1d69953bd2b6\" , \"typeDefName\" : \"Confidentiality\" , \"typeDefVersion\" : 2 , \"typeDefDescription\" : \"Defines the level of confidentiality of related data items.\" , \"validInstanceProperties\" : [ \"notes\" , \"steward\" , \"level\" , \"confidence\" , \"source\" , \"status\" , \"levelIdentifier\" , \"confidentialityLevel\" ] }, \"instanceProvenanceType\" : \"LOCAL_COHORT\" , \"metadataCollectionId\" : \"5ce8e35a-2df3-409d-b085-bb64356407c8\" , \"metadataCollectionName\" : \"igcproxy\" , \"createdBy\" : \"Administrator IIS\" , \"updatedBy\" : \"Administrator IIS\" , \"maintainedBy\" : [ \"Administrator IIS\" ], \"createTime\" : \"2019-12-10T16:19:48.000+00:00\" , \"updateTime\" : \"2019-12-10T16:20:14.000+00:00\" , \"version\" : 1575994814000 , \"classificationOrigin\" : \"ASSIGNED\" , \"name\" : \"Confidentiality\" , \"properties\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"confidence\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"7fc49104-fd3a-46c8-b6bf-f16b6074cd35\" , \"typeName\" : \"int\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_INT\" , \"primitiveValue\" : 100 }, \"levelIdentifier\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"7fc49104-fd3a-46c8-b6bf-f16b6074cd35\" , \"typeName\" : \"int\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_INT\" , \"primitiveValue\" : 3 }, \"status\" : { \"class\" : \"EnumPropertyValue\" , \"instancePropertyCategory\" : \"ENUM\" , \"ordinal\" : 99 , \"symbolicName\" : \"Other\" , \"description\" : \"Another classification assignment status.\" } }, \"propertyNames\" : [ \"confidence\" , \"levelIdentifier\" , \"status\" ], \"propertyCount\" : 3 }, \"status\" : \"ACTIVE\" } ], \"properties\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"additionalProperties\" : { \"class\" : \"MapPropertyValue\" , \"instancePropertyCategory\" : \"MAP\" , \"mapValues\" : { \"class\" : \"InstanceProperties\" , \"instanceProperties\" : { \"glossary_type\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"PUBLISHED\" }, \"is_modifier\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"false\" }, \"type\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"NONE\" }, \"status\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"ACCEPTED\" } }, \"propertyNames\" : [ \"glossary_type\" , \"is_modifier\" , \"type\" , \"status\" ], \"propertyCount\" : 4 }, \"mapElementCount\" : 4 }, \"displayName\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"Email Address\" }, \"qualifiedName\" : { \"class\" : \"PrimitivePropertyValue\" , \"instancePropertyCategory\" : \"PRIMITIVE\" , \"typeGUID\" : \"b34a64b9-554a-42b1-8f8a-7d5c2339f9c4\" , \"typeName\" : \"string\" , \"primitiveDefCategory\" : \"OM_PRIMITIVE_TYPE_STRING\" , \"primitiveValue\" : \"(category)=Coco Pharmaceuticals::(term)=Email Address\" } }, \"propertyNames\" : [ \"displayName\" , \"qualifiedName\" , \"additionalProperties\" ], \"propertyCount\" : 3 }, \"status\" : \"ACTIVE\" }, ... ] } Note that the results are returned in Egeria's type structure, as GlossaryTerm s with Classification s and so on. These are the same results that Egeria would see from IGC when running a federated query out to a cohort that is running the IGC proxy connector, and would therefore be able to combine with other metadata from other members of the cohort.","title":"Run a query"},{"location":"getting-started/igc/","text":"IGC Adapter \u00b6 The IGC proxy connects an IBM Information Governance Catalog environment to one or more Egeria cohorts. Ensure you have already completed the Setup steps before proceeding. 5. Configure the connector \u00b6 a. Configure the event bus \u00b6 curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"producer\":{\"bootstrap.servers\":\"localhost:9092\"},\"consumer\":{\"bootstrap.servers\":\"localhost:9092\"}}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/event-bus?connectorProvider=org.odpi.openmetadata.adapters.eventbus.topic.kafka.KafkaOpenMetadataTopicProvider\" Detailed explanation The event bus is how Egeria coordinates communication amongst its various servers and repositories: for example, ensuring that any new type definitions are registered with each repository capable of handling them, notifying other repositories when the metadata in one repository changes, etc. The URL parameter connectorProvider defines the type of event bus to use (in this case Apache Kafka). The JSON payload gives details about how to connect to Apache Kafka, in this case assuming it is running on local machine ( localhost ) on its default port ( 9092 ). Response from event bus configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } b. Configure the cohort \u00b6 curl -k -X POST \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/cohorts/mycohort\" Detailed explanation The cohort is a network of interacting metadata servers, which could be some subset of the overall Egeria landscape. We only need to supply a name for the cohort, which forms part of the URL itself: in this example using mycohort . Response from cohort configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } c. Configure IGC connector \u00b6 curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"class\":\"Connection\",\"connectorType\":{\"class\":\"ConnectorType\",\"connectorProviderClassName\":\"org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider\"},\"endpoint\":{\"class\":\"Endpoint\",\"address\":\"infosvr:9446\",\"protocol\":\"https\"},\"userId\":\"isadmin\",\"clearPassword\":\"isadmin\",\"configurationProperties\":{\"defaultZones\":[\"default\"]}}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/local-repository/mode/repository-proxy/connection\" Detailed explanation This final call to the API configures the behavior of the IGC connector itself. The URL to which we post indicates that we will use the Egeria server chassis's built-in repository proxy capability to access the IGC repository connector. The JSON payload's contents define how this connector itself should be configured: specifically, which Java class should be used for the repository connection. Here we can see the payload refers to the IGCOMRSRepositoryConnectorProvider , which therefore tells the proxy to use this class -- specific to the IGC repository connector -- in order to configure its repository connection. The details embedded within the endpoint key indicate how the connector itself should connect to IGC : the address (hostname and port) of the IGC instance and login credentials (username and password) for the account to use to access IGC via its API. Response from connector configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } Be sure to replace hostname and credential information If copy / pasting the command above, be sure to replace the hostname and credential information with the appropriate settings for your own environment before running it. 6. Start the connector instance \u00b6 curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/instance\" Detailed explanation Up to this point we have only configured the connector, but have not actually started it. This final API call tells Egeria to start the connector, based on the configuration the previous API calls defined. Response from connector instance startup { \"class\" : \"SuccessMessageResponse\" , \"relatedHTTPCode\" : 200 , \"successMessage\" : \"Fri Feb 12 20:34:16 GMT 2021 igcproxy is running the following services: [Open Metadata Repository Services (OMRS)]\" } It may take 10-15 seconds to complete, but the example response above indicates that the connector instance is now running. Other startup information of potential interest Back in the console where the server chassis is running, you should see the audit log printing out a large amount of information as the startup is running. Most of this is related to the registration of type definition details with the repository. Project Egeria - Open Metadata and Governance ____ __ ___ ___ ______ _____ ____ _ _ ___ / __ \\ / |/ // | / ____/ / ___/ ___ ____ _ __ ___ ____ / _ \\ / / __ / / / _ /__ ____ _ _ / / / // /|_/ // /| | / / __ \\__ \\ / _ \\ / __/| | / // _ \\ / __/ / /_/ // // | / _\\ / /_ / | / _// || | / /_/ // / / // ___ |/ /_/ / ___/ // __// / | |/ // __// / / __ // // / \\ / /_ / _// / // / / / / / \\____//_/ /_//_/ |_|\\____/ /____/ \\___//_/ |___/ \\___//_/ /_/ /_/ \\__/\\//___//_/ \\__//_/ /_/ /_/ :: Powered by Spring Boot (v2.5.0) :: 2021-07-14 11:20:03.855 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9443 (https) 2021-07-14 11:20:30.683 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9443 (https) with context path '' Wed Jul 14 11:20:13 GMT 2021 No OMAG servers listed in startup configuration Wed Jul 14 11:20:30 GMT 2021 OMAG server platform ready for more configuration Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0064 The Open Metadata Repository Services (OMRS) has initialized the audit log for the Repository Proxy called ibmigc Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMAG-ADMIN-0001 The ibmigc server is configured with a max page size of 1000 Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0001 The Open Metadata Repository Services (OMRS) is initializing the subsystems to support a new server Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0003 The local repository is initializing the metadata collection named ibmigc with an id of 90a211ae-c052-412f-83c5-53a20221e7b7 Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0029 The local repository outbound event manager is initializing Wed Jul 14 11:25:06 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0002 The IBM Information Governance Catalog proxy is attempting to connect to IGC at https://infosvr:9446 Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0003 The IBM Information Governance Catalog proxy has successfully connected to IGC at https://infosvr:9446 Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0001 The IBM Information Governance Catalog proxy is starting a new server instance Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0004 The IBM Information Governance Catalog proxy has started a new instance for server ibmigc, detected IGC version v11.7.1.0 Wed Jul 14 11:25:08 GMT 2021 igcproxy Startup OMRS-AUDIT-0024 The local repositorys event mapper connector {0} is ready to send and receive events Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0009 The IBM Information Governance Catalog event mapper is starting up Wed Jul 14 11:25:12 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0010 The IBM Information Governance Catalog event mapper is running Wed Jul 14 11:25:12 GMT 2021 igcproxy Information OMRS-AUDIT-0050 The Open Metadata Repository Services (OMRS) is about to process open metadata archive Open Metadata Types Wed Jul 14 11:25:12 GMT 2021 igcproxy Types OMRS-AUDIT-0301 The local server has added a new type called object with a unique identifier of 1c4b21f4-0b67-41a7-a6ed-2af185eb9b3b and a version number of 1 from Egeria (2.11) ... Wed Jul 14 11:25:17 GMT 2021 igcproxy Types OMRS-AUDIT-0303 The local server has updated an existing type called TermISATypeOFRelationship with a unique identifier of d5d588c3-46c9-420c-adff-6031802a7e51 to version number of 2 using a patch from Egeria (2.11) Wed Jul 14 11:25:17 GMT 2021 igcproxy Information OMRS-AUDIT-0053 The Open Metadata Repository Services (OMRS) has processed 766 types and 0 instances from open metadata archive Open Metadata Types Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0004 Connecting to the metadata highway Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0005 Connecting to open metadata repository cohort coco Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0029 The coco cohort inbound event manager is initializing Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0030 Registering the coco event consumer with the local repository outbound event manager Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0030 Registering the Local Repository Content (TypeDef) Manager event consumer with the coco cohort inbound event manager Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0030 Registering the Local Repository Inbound Instance Events event consumer with the coco cohort inbound event manager Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0007 The Open Metadata Repository Services (OMRS) has initialized Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0031 The coco cohort inbound event manager is starting with 1 type definition event consumer(s) and 1 instance event consumer(s) Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0026 Initializing listener for cohort coco Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0019 An OMRS Topic Connector has registered with an event bus connector for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0001 Connecting to Apache Kafka Topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic with a server identifier of 69824723-a395-4c1c-b61a-1b6a489e0ef9 Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0015 The local server is attempting to connect to Kafka, attempt 1 Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0003 10 properties passed to the Apache Kafka Consumer for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0002 10 properties passed to the Apache Kafka Producer for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0020 An OMRS Topic Connector is ready to send and receive events on topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0015 The listener thread for an OMRS Topic Connector for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic has started Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0010 The Apache Kafka producer for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic is starting up with 0 buffered messages Wed Jul 14 11:25:17 GMT 2021 igcproxy Cohort OMRS-AUDIT-0060 Registering with open metadata repository cohort coco using metadata collection id 90a211ae-c052-412f-83c5-53a20221e7b7 Wed Jul 14 11:25:17 GMT 2021 igcproxy Cohort OMRS-AUDIT-0062 Requesting registration information from other members of the open metadata repository cohort coco Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0031 The local repository outbound event manager is starting with 1 type definition event consumer(s) and 1 instance event consumer(s) Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0032 The local repository outbound event manager is sending out the 114 type definition events that were generated and buffered during server initialization Wed Jul 14 11:25:18 GMT 2021 igcproxy Startup OMAG-ADMIN-0004 The ibmigc server has successfully completed start up. The following services are running: [Open Metadata Repository Services (OMRS)] This final line indicates that the server has now started up and completed its registration with the cohort. Connector options \u00b6 There are currently two configuration options for the connector itself: Option Description defaultZones a list of strings defining the default zones that should be applied to all assets homed in this repository proxy's metadata collection ignoreUnmappedInstances a boolean indicating whether to ignore instances that are not mapped (will log a warning, but not throw any exception when set to true ) or to throw an exception if an unmapped instance is retrieved (when set to false ) Example configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"class\" : \"Connection\" , \"connectorType\" : { \"class\" : \"ConnectorType\" , \"connectorProviderClassName\" : \"org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider\" }, \"endpoint\" : { \"class\" : \"Endpoint\" , \"address\" : \"infosvr:9446\" , \"protocol\" : \"https\" }, \"userId\" : \"isadmin\" , \"clearPassword\" : \"isadmin\" , \"configurationProperties\" : { \"defaultZones\" : [ \"default\" ], \"ignoreUnmappedInstances\" : false } } If the options are not provided in the configuration of the connector, they will automatically default to the values given above.","title":"IGC Adapter"},{"location":"getting-started/igc/#igc-adapter","text":"The IGC proxy connects an IBM Information Governance Catalog environment to one or more Egeria cohorts. Ensure you have already completed the Setup steps before proceeding.","title":"IGC Adapter"},{"location":"getting-started/igc/#5-configure-the-connector","text":"","title":"5. Configure the connector"},{"location":"getting-started/igc/#a-configure-the-event-bus","text":"curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"producer\":{\"bootstrap.servers\":\"localhost:9092\"},\"consumer\":{\"bootstrap.servers\":\"localhost:9092\"}}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/event-bus?connectorProvider=org.odpi.openmetadata.adapters.eventbus.topic.kafka.KafkaOpenMetadataTopicProvider\" Detailed explanation The event bus is how Egeria coordinates communication amongst its various servers and repositories: for example, ensuring that any new type definitions are registered with each repository capable of handling them, notifying other repositories when the metadata in one repository changes, etc. The URL parameter connectorProvider defines the type of event bus to use (in this case Apache Kafka). The JSON payload gives details about how to connect to Apache Kafka, in this case assuming it is running on local machine ( localhost ) on its default port ( 9092 ). Response from event bus configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 }","title":"a. Configure the event bus"},{"location":"getting-started/igc/#b-configure-the-cohort","text":"curl -k -X POST \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/cohorts/mycohort\" Detailed explanation The cohort is a network of interacting metadata servers, which could be some subset of the overall Egeria landscape. We only need to supply a name for the cohort, which forms part of the URL itself: in this example using mycohort . Response from cohort configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 }","title":"b. Configure the cohort"},{"location":"getting-started/igc/#c-configure-igc-connector","text":"curl -k -X POST -H \"Content-Type: application/json\" \\ --data '{\"class\":\"Connection\",\"connectorType\":{\"class\":\"ConnectorType\",\"connectorProviderClassName\":\"org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider\"},\"endpoint\":{\"class\":\"Endpoint\",\"address\":\"infosvr:9446\",\"protocol\":\"https\"},\"userId\":\"isadmin\",\"clearPassword\":\"isadmin\",\"configurationProperties\":{\"defaultZones\":[\"default\"]}}' \\ \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/local-repository/mode/repository-proxy/connection\" Detailed explanation This final call to the API configures the behavior of the IGC connector itself. The URL to which we post indicates that we will use the Egeria server chassis's built-in repository proxy capability to access the IGC repository connector. The JSON payload's contents define how this connector itself should be configured: specifically, which Java class should be used for the repository connection. Here we can see the payload refers to the IGCOMRSRepositoryConnectorProvider , which therefore tells the proxy to use this class -- specific to the IGC repository connector -- in order to configure its repository connection. The details embedded within the endpoint key indicate how the connector itself should connect to IGC : the address (hostname and port) of the IGC instance and login credentials (username and password) for the account to use to access IGC via its API. Response from connector configuration { \"class\" : \"VoidResponse\" , \"relatedHTTPCode\" : 200 } Be sure to replace hostname and credential information If copy / pasting the command above, be sure to replace the hostname and credential information with the appropriate settings for your own environment before running it.","title":"c. Configure IGC connector"},{"location":"getting-started/igc/#6-start-the-connector-instance","text":"curl -k -X POST \"https://localhost:9443/open-metadata/admin-services/users/admin/servers/igcproxy/instance\" Detailed explanation Up to this point we have only configured the connector, but have not actually started it. This final API call tells Egeria to start the connector, based on the configuration the previous API calls defined. Response from connector instance startup { \"class\" : \"SuccessMessageResponse\" , \"relatedHTTPCode\" : 200 , \"successMessage\" : \"Fri Feb 12 20:34:16 GMT 2021 igcproxy is running the following services: [Open Metadata Repository Services (OMRS)]\" } It may take 10-15 seconds to complete, but the example response above indicates that the connector instance is now running. Other startup information of potential interest Back in the console where the server chassis is running, you should see the audit log printing out a large amount of information as the startup is running. Most of this is related to the registration of type definition details with the repository. Project Egeria - Open Metadata and Governance ____ __ ___ ___ ______ _____ ____ _ _ ___ / __ \\ / |/ // | / ____/ / ___/ ___ ____ _ __ ___ ____ / _ \\ / / __ / / / _ /__ ____ _ _ / / / // /|_/ // /| | / / __ \\__ \\ / _ \\ / __/| | / // _ \\ / __/ / /_/ // // | / _\\ / /_ / | / _// || | / /_/ // / / // ___ |/ /_/ / ___/ // __// / | |/ // __// / / __ // // / \\ / /_ / _// / // / / / / / \\____//_/ /_//_/ |_|\\____/ /____/ \\___//_/ |___/ \\___//_/ /_/ /_/ \\__/\\//___//_/ \\__//_/ /_/ /_/ :: Powered by Spring Boot (v2.5.0) :: 2021-07-14 11:20:03.855 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9443 (https) 2021-07-14 11:20:30.683 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9443 (https) with context path '' Wed Jul 14 11:20:13 GMT 2021 No OMAG servers listed in startup configuration Wed Jul 14 11:20:30 GMT 2021 OMAG server platform ready for more configuration Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0064 The Open Metadata Repository Services (OMRS) has initialized the audit log for the Repository Proxy called ibmigc Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMAG-ADMIN-0001 The ibmigc server is configured with a max page size of 1000 Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0001 The Open Metadata Repository Services (OMRS) is initializing the subsystems to support a new server Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0003 The local repository is initializing the metadata collection named ibmigc with an id of 90a211ae-c052-412f-83c5-53a20221e7b7 Wed Jul 14 11:25:06 GMT 2021 igcproxy Startup OMRS-AUDIT-0029 The local repository outbound event manager is initializing Wed Jul 14 11:25:06 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0002 The IBM Information Governance Catalog proxy is attempting to connect to IGC at https://infosvr:9446 Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0003 The IBM Information Governance Catalog proxy has successfully connected to IGC at https://infosvr:9446 Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0001 The IBM Information Governance Catalog proxy is starting a new server instance Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0004 The IBM Information Governance Catalog proxy has started a new instance for server ibmigc, detected IGC version v11.7.1.0 Wed Jul 14 11:25:08 GMT 2021 igcproxy Startup OMRS-AUDIT-0024 The local repositorys event mapper connector {0} is ready to send and receive events Wed Jul 14 11:25:08 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0009 The IBM Information Governance Catalog event mapper is starting up Wed Jul 14 11:25:12 GMT 2021 igcproxy Information OMRS-IGC-REPOSITORY-0010 The IBM Information Governance Catalog event mapper is running Wed Jul 14 11:25:12 GMT 2021 igcproxy Information OMRS-AUDIT-0050 The Open Metadata Repository Services (OMRS) is about to process open metadata archive Open Metadata Types Wed Jul 14 11:25:12 GMT 2021 igcproxy Types OMRS-AUDIT-0301 The local server has added a new type called object with a unique identifier of 1c4b21f4-0b67-41a7-a6ed-2af185eb9b3b and a version number of 1 from Egeria (2.11) ... Wed Jul 14 11:25:17 GMT 2021 igcproxy Types OMRS-AUDIT-0303 The local server has updated an existing type called TermISATypeOFRelationship with a unique identifier of d5d588c3-46c9-420c-adff-6031802a7e51 to version number of 2 using a patch from Egeria (2.11) Wed Jul 14 11:25:17 GMT 2021 igcproxy Information OMRS-AUDIT-0053 The Open Metadata Repository Services (OMRS) has processed 766 types and 0 instances from open metadata archive Open Metadata Types Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0004 Connecting to the metadata highway Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0005 Connecting to open metadata repository cohort coco Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0029 The coco cohort inbound event manager is initializing Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0030 Registering the coco event consumer with the local repository outbound event manager Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0030 Registering the Local Repository Content (TypeDef) Manager event consumer with the coco cohort inbound event manager Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0030 Registering the Local Repository Inbound Instance Events event consumer with the coco cohort inbound event manager Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0007 The Open Metadata Repository Services (OMRS) has initialized Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0031 The coco cohort inbound event manager is starting with 1 type definition event consumer(s) and 1 instance event consumer(s) Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0026 Initializing listener for cohort coco Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0019 An OMRS Topic Connector has registered with an event bus connector for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0001 Connecting to Apache Kafka Topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic with a server identifier of 69824723-a395-4c1c-b61a-1b6a489e0ef9 Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0015 The local server is attempting to connect to Kafka, attempt 1 Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0003 10 properties passed to the Apache Kafka Consumer for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0002 10 properties passed to the Apache Kafka Producer for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0020 An OMRS Topic Connector is ready to send and receive events on topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0015 The listener thread for an OMRS Topic Connector for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic has started Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OCF-KAFKA-TOPIC-CONNECTOR-0010 The Apache Kafka producer for topic egeria.openmetadata.repositoryservices.cohort.coco.OMRSTopic is starting up with 0 buffered messages Wed Jul 14 11:25:17 GMT 2021 igcproxy Cohort OMRS-AUDIT-0060 Registering with open metadata repository cohort coco using metadata collection id 90a211ae-c052-412f-83c5-53a20221e7b7 Wed Jul 14 11:25:17 GMT 2021 igcproxy Cohort OMRS-AUDIT-0062 Requesting registration information from other members of the open metadata repository cohort coco Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0031 The local repository outbound event manager is starting with 1 type definition event consumer(s) and 1 instance event consumer(s) Wed Jul 14 11:25:17 GMT 2021 igcproxy Startup OMRS-AUDIT-0032 The local repository outbound event manager is sending out the 114 type definition events that were generated and buffered during server initialization Wed Jul 14 11:25:18 GMT 2021 igcproxy Startup OMAG-ADMIN-0004 The ibmigc server has successfully completed start up. The following services are running: [Open Metadata Repository Services (OMRS)] This final line indicates that the server has now started up and completed its registration with the cohort.","title":"6. Start the connector instance"},{"location":"getting-started/igc/#connector-options","text":"There are currently two configuration options for the connector itself: Option Description defaultZones a list of strings defining the default zones that should be applied to all assets homed in this repository proxy's metadata collection ignoreUnmappedInstances a boolean indicating whether to ignore instances that are not mapped (will log a warning, but not throw any exception when set to true ) or to throw an exception if an unmapped instance is retrieved (when set to false ) Example configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"class\" : \"Connection\" , \"connectorType\" : { \"class\" : \"ConnectorType\" , \"connectorProviderClassName\" : \"org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider\" }, \"endpoint\" : { \"class\" : \"Endpoint\" , \"address\" : \"infosvr:9446\" , \"protocol\" : \"https\" }, \"userId\" : \"isadmin\" , \"clearPassword\" : \"isadmin\" , \"configurationProperties\" : { \"defaultZones\" : [ \"default\" ], \"ignoreUnmappedInstances\" : false } } If the options are not provided in the configuration of the connector, they will automatically default to the values given above.","title":"Connector options"},{"location":"how-it-works/datastage/","text":"DataStage Adapter \u00b6 Integrating with Egeria \u00b6 The IBM DataStage connector is implemented as a data engine proxy that runs through the Egeria OMAG Platform (server chassis). It does so by being implemented as a Data Engine Connector and implementing the methods defined by this connector's interface. Integrating with DataStage \u00b6 Just like the IBM Information Governance Catalog connector, all communication occurs through IBM Information Server's REST API and the connector only supports reading metadata . All write operations can only be done by a user directly through IBM Information Server's supported web UIs or thick clients. Capabilities \u00b6 Read-only data engine proxy connector Poll-based change retrieval (no events) Integrates column-level lineage information from IBM Information Server Creates a process hierarchy in Egeria each sequence is a process each job is a process, with each sequence it appears in as a parent process each stage is a process, with the job it is contained in as a parent process Configurable operation inclusion / exclusion of virtual assets maximum window of changes to include in each poll Limitations \u00b6 Unable to detect or communicate the deletion of jobs Some specific elements and scenarios may not yet be handled For example: shared containers nested sequences routines custom operators","title":"DataStage Adapter"},{"location":"how-it-works/datastage/#datastage-adapter","text":"","title":"DataStage Adapter"},{"location":"how-it-works/datastage/#integrating-with-egeria","text":"The IBM DataStage connector is implemented as a data engine proxy that runs through the Egeria OMAG Platform (server chassis). It does so by being implemented as a Data Engine Connector and implementing the methods defined by this connector's interface.","title":"Integrating with Egeria"},{"location":"how-it-works/datastage/#integrating-with-datastage","text":"Just like the IBM Information Governance Catalog connector, all communication occurs through IBM Information Server's REST API and the connector only supports reading metadata . All write operations can only be done by a user directly through IBM Information Server's supported web UIs or thick clients.","title":"Integrating with DataStage"},{"location":"how-it-works/datastage/#capabilities","text":"Read-only data engine proxy connector Poll-based change retrieval (no events) Integrates column-level lineage information from IBM Information Server Creates a process hierarchy in Egeria each sequence is a process each job is a process, with each sequence it appears in as a parent process each stage is a process, with the job it is contained in as a parent process Configurable operation inclusion / exclusion of virtual assets maximum window of changes to include in each poll","title":"Capabilities"},{"location":"how-it-works/datastage/#limitations","text":"Unable to detect or communicate the deletion of jobs Some specific elements and scenarios may not yet be handled For example: shared containers nested sequences routines custom operators","title":"Limitations"},{"location":"how-it-works/igc/","text":"IGC Adapter \u00b6 Integrating with Egeria \u00b6 The IBM Information Governance Catalog connector is implemented as a repository proxy that runs through the Egeria OMAG Platform (server chassis). It does so by being implemented as an Open Metadata Repository Connector and implementing the repository-level methods defined by the Metadata Collection interface. Integrating with IGC \u00b6 The connector communicates with an existing IBM Information Server environment through its REST API. Note that the connector only supports reading metadata from Information Server and is unable to create or update any metadata. Write operations can only be done by a user directly through IBM Information Server's supported web UIs or thick clients. Capabilities \u00b6 Read-only open metadata repository connector Conformant to the mandatory CTS profile (metadata sharing) including some additional search operations Common metadata entities are pre-mapped Database information (host, database, schema, table, column) File information (host, folder, file, record, field) Glossary information (category, term) Common relationships are pre-mapped Technical metadata containment (for the entities above) Technical / business metadata relationships (ie. semantic assignment) Some classifications are pre-defined Although this is done through specific code and implementation choices, and may not be as-desired depending on the existing implementation of IGC in an organization. Designed to be extensible Without needing to fork the connector and modify code inline: extend with only what you need, re-using the base connector as-is (including any future enhancements, bug fixes, additions, etc). Limitations \u00b6 Does not handle any create, update or delete operations from the rest of the cohort Does not provide an event mapper No notification of metadata creation, changes or deletions via IGC 's API or user interface are propagated out to the cohort: the connector only supports federated queries and retrieval through the metadata collection interface (APIs). Implemented mappings \u00b6 The following types are currently mapped from IGC to OMRS . Note that there are currently no mappings from OMRS types to IGC types as this connector is entirely read-only (not capable of adding metadata to IGC ). Hoping for a mapping that isn't there? Submit an issue , or Check out any of the linked code below for examples of what's needed to create a mapping, and create your own (and feel free to submit a PR with the result!) Mapped entities \u00b6 IGC type(s) OMRS type(s) category Glossary 1 , GlossaryCategory connector ConnectorType data_class DataClass data_connection Connection data_file DataFile data_file_field TabularColumn data_file_folder FileFolder data_file_record TabularSchemaType database Database database_column RelationalColumn database_schema DeployedDatabaseSchema , RelationalDBSchemaType database_table RelationalTable host , host_(engine) Endpoint information_asset NoteLog 2 information_governance_policy GovernancePolicy label InformalTag note NoteEntry 3 term GlossaryTerm user , group ContactDetails , Team user , steward_user , non_steward_user Person Mapped relationships \u00b6 IGC types and properties OMRS type database_schema - database_schema AssetSchemaType 4 data_file.data_file_records - data_file_record.data_file AssetSchemaType information_asset - information_asset AttachedNoteLog 5 information_asset.notes - note.belonging_to AttachedNoteLogEntry 6 information_asset.labels - label.labeled_assets AttachedTag data_file_record.data_file_fields - data_file_field.data_file_record AttributeForSchema database_table.database_columns - database_column.database_table_or_view NestedSchemaAttribute database_schema.database_tables - database_table.database_schema AttributeForSchema category.subcategories - category.parent_category CategoryAnchor 7 category.subcategories - category.parent_category CategoryHierarchyLink data_connection.data_connectors - connector.data_connections ConnectionConnectorType host.data_connections - connector.data_connections - data_connection.data_connectors ConnectionEndpoint 8 data_connection.imports_database - database.data_connections ConnectionToAsset data_connection - data_file_folder.data_connection ConnectionToAsset user - user ContactThrough 9 group - group ContactThrough 9 information_asset.detected_classifications / information_asset.selected_classification - classification - data_class.classified_assets_detected / data_class.classifications_selected DataClassAssignment 10 data_class.contains_data_classes - data_class.parent_data_class DataClassHierarchy database.database_schemas - database_schema.database DataContentForDataSet data_file_folder.data_file_folders - data_file_folder.parent_folder FolderHierarchy database_column.defined_foreign_key_referenced / database_column.selected_foreign_key_referenced - database_column.defined_foreign_key_references / database_column.selected_foreign_key_references ForeignKey information_governance_policy.subpolicies - information_governance_policy.parent_policy GovernancePolicyLink data_file_folder.data_files - data_file.parent_folder NestedFile term.related_terms - term.related_terms RelatedTerm term.replaced_by - term.replaces ReplacementTerm information_asset.assigned_to_terms - term.assigned_assets SemanticAssignment term.synonyms - term.synonyms Synonym category.terms - term.parent_category TermAnchor 11 category.terms - term.parent_category TermCategorization term.has_a_term - term.is_of TermHASARelationship term.has_types - term.is_a_type_of TermISATypeOFRelationship term.translations - term.translations Translation Mapped classifications \u00b6 Because IGC has no \"Classification\" concept, the following are suggested implementations of Classifications within IGC by overloading the use of other concepts. These can be changed to alternative implementations simply by updating the linked mapping code to match your desired implementation of the concept. OMRS type IGC mapping logic AssetZoneMembership The provided implementation simply assigns the list of default zones that have been specified as default.zones in the configuration of the connector to each Database , DataFile , DeployedDatabaseSchema and FileFolder in the IGC repository anytime these assets are retrieved. Confidentiality The provided implementation assigns a Confidentiality classification to a GlossaryTerm (only) using the assigned_to_term relationship from one term to any term within the Classifications/Confidentiality parent category . The terms contained within this Confidentiality category in essence represent the ConfidentialityLevel enumeration in OMRS . With this implementation, any assigned_to_term relationship on a term , where the assigned term is within this Confidentiality category in IGC , will be mapped to a Confidentiality classification in OMRS . PrimaryKey The provided implementation looks for the presence of either the defined_primary_key or selected_primary_key properties on a database_column , and if present add a PrimaryKey classification to that RelationalColumn . SpineObject The provided implementation assigns a SpineObject classification to a GlossaryTerm based on the referencing_categories of the term in IGC . Specifically, when the term has a referencing_categories link to Classifications/SpineObject , the GlossaryTerm to which that term maps will be assigned the SpineObject classification. SubjectArea The provided implementation assigns a SubjectArea classification to a GlossaryCategory based on the assigned_to_term relationship of the category in IGC . Specifically, when the category has an assigned_to_term relationship to the IGC term Classifications/SubjectArea , the GlossaryCategory will be assigned a SubjectArea classification whose name will match the name of the IGC category . TypeEmbeddedAttribute The provided implementation adds this classification to all RelationTable , RelationalColumn and TabularColumn instances to simplify the management of type information without requiring additional SchemaType subclasses (like RelationalTableType , RelationalColumnType and TabularColumnType ) and their additional relationships. All top-level categories in IGC that are not named Classifications are considered a Glossary, all categories whose parent_category is not null and not Classifications are considered a GlossaryCategory. \u21a9 NoteLog is a generated entity, present only for those IGC objects that support notes, and it cannot be searched. \u21a9 NoteEntry cannot be searched, only retrieved from the NoteLog to which they are related. \u21a9 AssetSchemaType between database_schema objects is a generated relationship (all properties for both endpoints are on a single entity instance in IGC ). \u21a9 AttachedNoteLog between information_asset objects is a generated relationship (all properties for both endpoints are on a single entity instance in IGC ), and is only present on those IGC objects that support notes. \u21a9 AttachedNoteLogEntry relationship cannot be searched. \u21a9 CategoryAnchor relationship is between the ultimate parent IGC category (Glossary) and any offspring. \u21a9 ConnectionEndpoint is linked through IGC 's connector object in the middle \u21a9 ContactThrough is a generated relationship (all properties for both endpoints are on a single entity instance in IGC ). \u21a9 \u21a9 DataClassAssignment is linked through IGC 's classification object in the middle, which has some relationship-specific properties. \u21a9 TermAnchor creates a relationship between the ultimate parent IGC category (Glossary) and an IGC term. \u21a9","title":"IGC Adapter"},{"location":"how-it-works/igc/#igc-adapter","text":"","title":"IGC Adapter"},{"location":"how-it-works/igc/#integrating-with-egeria","text":"The IBM Information Governance Catalog connector is implemented as a repository proxy that runs through the Egeria OMAG Platform (server chassis). It does so by being implemented as an Open Metadata Repository Connector and implementing the repository-level methods defined by the Metadata Collection interface.","title":"Integrating with Egeria"},{"location":"how-it-works/igc/#integrating-with-igc","text":"The connector communicates with an existing IBM Information Server environment through its REST API. Note that the connector only supports reading metadata from Information Server and is unable to create or update any metadata. Write operations can only be done by a user directly through IBM Information Server's supported web UIs or thick clients.","title":"Integrating with IGC"},{"location":"how-it-works/igc/#capabilities","text":"Read-only open metadata repository connector Conformant to the mandatory CTS profile (metadata sharing) including some additional search operations Common metadata entities are pre-mapped Database information (host, database, schema, table, column) File information (host, folder, file, record, field) Glossary information (category, term) Common relationships are pre-mapped Technical metadata containment (for the entities above) Technical / business metadata relationships (ie. semantic assignment) Some classifications are pre-defined Although this is done through specific code and implementation choices, and may not be as-desired depending on the existing implementation of IGC in an organization. Designed to be extensible Without needing to fork the connector and modify code inline: extend with only what you need, re-using the base connector as-is (including any future enhancements, bug fixes, additions, etc).","title":"Capabilities"},{"location":"how-it-works/igc/#limitations","text":"Does not handle any create, update or delete operations from the rest of the cohort Does not provide an event mapper No notification of metadata creation, changes or deletions via IGC 's API or user interface are propagated out to the cohort: the connector only supports federated queries and retrieval through the metadata collection interface (APIs).","title":"Limitations"},{"location":"how-it-works/igc/#implemented-mappings","text":"The following types are currently mapped from IGC to OMRS . Note that there are currently no mappings from OMRS types to IGC types as this connector is entirely read-only (not capable of adding metadata to IGC ). Hoping for a mapping that isn't there? Submit an issue , or Check out any of the linked code below for examples of what's needed to create a mapping, and create your own (and feel free to submit a PR with the result!)","title":"Implemented mappings"},{"location":"how-it-works/igc/#mapped-entities","text":"IGC type(s) OMRS type(s) category Glossary 1 , GlossaryCategory connector ConnectorType data_class DataClass data_connection Connection data_file DataFile data_file_field TabularColumn data_file_folder FileFolder data_file_record TabularSchemaType database Database database_column RelationalColumn database_schema DeployedDatabaseSchema , RelationalDBSchemaType database_table RelationalTable host , host_(engine) Endpoint information_asset NoteLog 2 information_governance_policy GovernancePolicy label InformalTag note NoteEntry 3 term GlossaryTerm user , group ContactDetails , Team user , steward_user , non_steward_user Person","title":"Mapped entities"},{"location":"how-it-works/igc/#mapped-relationships","text":"IGC types and properties OMRS type database_schema - database_schema AssetSchemaType 4 data_file.data_file_records - data_file_record.data_file AssetSchemaType information_asset - information_asset AttachedNoteLog 5 information_asset.notes - note.belonging_to AttachedNoteLogEntry 6 information_asset.labels - label.labeled_assets AttachedTag data_file_record.data_file_fields - data_file_field.data_file_record AttributeForSchema database_table.database_columns - database_column.database_table_or_view NestedSchemaAttribute database_schema.database_tables - database_table.database_schema AttributeForSchema category.subcategories - category.parent_category CategoryAnchor 7 category.subcategories - category.parent_category CategoryHierarchyLink data_connection.data_connectors - connector.data_connections ConnectionConnectorType host.data_connections - connector.data_connections - data_connection.data_connectors ConnectionEndpoint 8 data_connection.imports_database - database.data_connections ConnectionToAsset data_connection - data_file_folder.data_connection ConnectionToAsset user - user ContactThrough 9 group - group ContactThrough 9 information_asset.detected_classifications / information_asset.selected_classification - classification - data_class.classified_assets_detected / data_class.classifications_selected DataClassAssignment 10 data_class.contains_data_classes - data_class.parent_data_class DataClassHierarchy database.database_schemas - database_schema.database DataContentForDataSet data_file_folder.data_file_folders - data_file_folder.parent_folder FolderHierarchy database_column.defined_foreign_key_referenced / database_column.selected_foreign_key_referenced - database_column.defined_foreign_key_references / database_column.selected_foreign_key_references ForeignKey information_governance_policy.subpolicies - information_governance_policy.parent_policy GovernancePolicyLink data_file_folder.data_files - data_file.parent_folder NestedFile term.related_terms - term.related_terms RelatedTerm term.replaced_by - term.replaces ReplacementTerm information_asset.assigned_to_terms - term.assigned_assets SemanticAssignment term.synonyms - term.synonyms Synonym category.terms - term.parent_category TermAnchor 11 category.terms - term.parent_category TermCategorization term.has_a_term - term.is_of TermHASARelationship term.has_types - term.is_a_type_of TermISATypeOFRelationship term.translations - term.translations Translation","title":"Mapped relationships"},{"location":"how-it-works/igc/#mapped-classifications","text":"Because IGC has no \"Classification\" concept, the following are suggested implementations of Classifications within IGC by overloading the use of other concepts. These can be changed to alternative implementations simply by updating the linked mapping code to match your desired implementation of the concept. OMRS type IGC mapping logic AssetZoneMembership The provided implementation simply assigns the list of default zones that have been specified as default.zones in the configuration of the connector to each Database , DataFile , DeployedDatabaseSchema and FileFolder in the IGC repository anytime these assets are retrieved. Confidentiality The provided implementation assigns a Confidentiality classification to a GlossaryTerm (only) using the assigned_to_term relationship from one term to any term within the Classifications/Confidentiality parent category . The terms contained within this Confidentiality category in essence represent the ConfidentialityLevel enumeration in OMRS . With this implementation, any assigned_to_term relationship on a term , where the assigned term is within this Confidentiality category in IGC , will be mapped to a Confidentiality classification in OMRS . PrimaryKey The provided implementation looks for the presence of either the defined_primary_key or selected_primary_key properties on a database_column , and if present add a PrimaryKey classification to that RelationalColumn . SpineObject The provided implementation assigns a SpineObject classification to a GlossaryTerm based on the referencing_categories of the term in IGC . Specifically, when the term has a referencing_categories link to Classifications/SpineObject , the GlossaryTerm to which that term maps will be assigned the SpineObject classification. SubjectArea The provided implementation assigns a SubjectArea classification to a GlossaryCategory based on the assigned_to_term relationship of the category in IGC . Specifically, when the category has an assigned_to_term relationship to the IGC term Classifications/SubjectArea , the GlossaryCategory will be assigned a SubjectArea classification whose name will match the name of the IGC category . TypeEmbeddedAttribute The provided implementation adds this classification to all RelationTable , RelationalColumn and TabularColumn instances to simplify the management of type information without requiring additional SchemaType subclasses (like RelationalTableType , RelationalColumnType and TabularColumnType ) and their additional relationships. All top-level categories in IGC that are not named Classifications are considered a Glossary, all categories whose parent_category is not null and not Classifications are considered a GlossaryCategory. \u21a9 NoteLog is a generated entity, present only for those IGC objects that support notes, and it cannot be searched. \u21a9 NoteEntry cannot be searched, only retrieved from the NoteLog to which they are related. \u21a9 AssetSchemaType between database_schema objects is a generated relationship (all properties for both endpoints are on a single entity instance in IGC ). \u21a9 AttachedNoteLog between information_asset objects is a generated relationship (all properties for both endpoints are on a single entity instance in IGC ), and is only present on those IGC objects that support notes. \u21a9 AttachedNoteLogEntry relationship cannot be searched. \u21a9 CategoryAnchor relationship is between the ultimate parent IGC category (Glossary) and any offspring. \u21a9 ConnectionEndpoint is linked through IGC 's connector object in the middle \u21a9 ContactThrough is a generated relationship (all properties for both endpoints are on a single entity instance in IGC ). \u21a9 \u21a9 DataClassAssignment is linked through IGC 's classification object in the middle, which has some relationship-specific properties. \u21a9 TermAnchor creates a relationship between the ultimate parent IGC category (Glossary) and an IGC term. \u21a9","title":"Mapped classifications"},{"location":"reference/extending/","text":"Extending the connector \u00b6 The IGC connector is intended to be extensible, with the intention of allowing you to re-use the base logic already contained in the connector while adding only the extra portions required for your particular implementation or desired behavior. The following sections describe the recommended approach to developing such extensions, without needing to modify or re-build the base connector itself. Project setup \u00b6 The basic approach is to create a new project in which you will develop your extensions. This project should have as dependencies the base connector. Root-level pom.xml snippet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <dependencyManagement> <dependencies> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> ibm-igc-rest-client-library </artifactId> <version> ${open-metadata.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> egeria-connector-ibm-igc-adapter </artifactId> <version> ${open-metadata.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> repository-services-apis </artifactId> <version> ${open-metadata.version} </version> <scope> provided </scope> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> open-connector-framework </artifactId> <version> ${open-metadata.version} </version> <scope> provided </scope> </dependency> </dependencies> </dependencyManagement> These are the minimal dependencies to re-use the logic already provided by the base connector. Like the base connector project, you should then also have modules in your own project for: the client library, where you'll put any extensions to the data model, e.g. for custom attributes or OpenIGC objects the adapter, where you'll put any extensions to or net-new mapping logic Client library pom.xml snippet 1 2 3 4 5 6 <dependencies> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> ibm-igc-rest-client-library </artifactId> </dependency> </dependencies> This includes the base client library as a dependency. Adapter module pom.xml snippet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <dependencies> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> egeria-connector-ibm-igc-adapter </artifactId> </dependency> <dependency> <groupId> ${your-group-for-your-extensions} </groupId> <artifactId> ${your-extended-client-library-artifact-id} </artifactId> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> open-connector-framework </artifactId> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> repository-services-apis </artifactId> </dependency> </dependencies> Note that you will need to replace the highlighted lines with the group and artifact IDs for your extended client library. Extending the vanilla IGC model \u00b6 To avoid potential injection exposure risks, the (de)serialization is strongly typed and will not dynamically handle arbitrary JSON or additions to the Java beans (POJOs). As a result, the connector out-of-the-box will not handle any custom attributes in IGC or any new asset types developed through OpenIGC. All of these will be automatically ignored. Their values will not even be included in the additionalProperties map of a Referenceable, for example. Therefore, if you have extended the vanilla IGC model with either custom attributes or OpenIGC assets, and you want to be able to make use of them as part of your connector, you will need to extend the connector with this handling. Handling custom attributes \u00b6 In your own client library module, create new POJO objects for each IGC asset type on which you have a custom attribute. These should extend the base connectors' model objects. For example, if you have a new custom attribute called Test Attribute defined against IGC 's term objects, you would write a new class like the following: Example class extending the term object with a Test Attribute custom attribute 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package whatever.structure.you.desire ; import com.fasterxml.jackson.annotation.* ; import org.odpi.egeria.connectors.ibm.igc.clientlibrary.model.base.Term ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY ; @JsonTypeInfo ( use = JsonTypeInfo . Id . NAME , include = JsonTypeInfo . As . EXISTING_PROPERTY , property = \"_type\" , visible = true , defaultImpl = Term . class ) @JsonAutoDetect ( getterVisibility = PUBLIC_ONLY , setterVisibility = PUBLIC_ONLY , fieldVisibility = NONE ) @JsonInclude ( JsonInclude . Include . NON_NULL ) @JsonIgnoreProperties ( ignoreUnknown = true ) @JsonTypeName ( \"term\" ) public class ExtendedTerm extends Term { @JsonProperty ( \"custom_Test Attribute\" ) protected String customTestAttribute ; @JsonProperty ( \"custom_Test Attribute\" ) public String getCustomTestAttribute () { return this . customTestAttribute ; } @JsonProperty ( \"custom_Test Attribute\" ) public void setCustomTestAttribute ( String customTestAttribute ) { this . customTestAttribute = customTestAttribute ; } } There are a few important points to follow when developing such extensions. These must be followed precisely as a number of the default mechanisms for mapping rely on these precise constraints: Include the Jackson annotations as illustrated in the example: in particular ensure that @JsonTypeName is set to the name of the IGC asset type (as it is known via the IGC REST API) Ensure that your new class extends the base class (in this case org.odpi.egeria.connectors.ibm.igc.clientlibrary.model.base.Term ) to ensure that all of the other base properties, getters, setters and (de)serialization are appropriately handled Add any new properties as protected members of the class: Name them using lower camel-case (remove spaces, underscores, etc and capitalize every word except the first) Always start them with custom Annotate each property with the name of the custom attribute as known to the IGC REST API (this will always follow the convention custom_<Attribute Name> , where <Attribute Name> is as you have defined it: including any spaces) Add a single getter for each new property: Name the method using lower camel-case Always start the method with get followed by the camel-case of the attribute name Annotate each property with the name of the custom attribute as known to the IGC REST API (see above) Add a single setter for each new property: Name the method using lower camel-case Always start the method with set followed by the camel-case of the attribute name Annotate each property with the name of the custom attribute as known to the IGC REST API (see above) Handling new asset types (\"OpenIGC\") \u00b6 As with the custom attributes, the connector will not handle any new asset types that you may have added through OpenIGC. You will need to extend the model (and mapping logic) similarly to what is suggested above for custom attributes in order to make use of any OpenIGC assets in your implementation through the connector. Since OpenIGC assets are entirely new objects rather than new properties on existing objects, these should be defined as new classes in your model. They should always extend the base InformationAsset object. For example, if you have a new OpenIGC object type named Bar within a bundle named Foo , you would write a new class like the following: Example class for a new object type named Bar in OpenIGC bundle Foo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package whatever.structure.you.desire ; import com.fasterxml.jackson.annotation.* ; import org.odpi.egeria.connectors.ibm.igc.clientlibrary.model.base.InformationAsset ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY ; @JsonAutoDetect ( getterVisibility = PUBLIC_ONLY , setterVisibility = PUBLIC_ONLY , fieldVisibility = NONE ) @JsonInclude ( JsonInclude . Include . NON_NULL ) @JsonIgnoreProperties ( ignoreUnknown = true ) @JsonTypeName ( \"$Foo-Bar\" ) public class FooBar extends InformationAsset { protected String $firstProperty ; protected String $secondProperty ; @JsonProperty ( \"$firstProperty\" ) public String getFirstProperty () { return this . $firstProperty ; } @JsonProperty ( \"$firstProperty\" ) public void setFirstProperty ( String firstProperty ) { this . $firstProperty = firstProperty ; } @JsonProperty ( \"$secondProperty\" ) public String getSecondProperty () { return this . $secondProperty ; } @JsonProperty ( \"$secondProperty\" ) public void setSecondProperty ( String secondProperty ) { this . $secondProperty = secondProperty ; } } Once again, the example should be followed precisely: Use the Jackson annotations, including the @JsonTypeName giving the name of the object as it will be known through the IGC REST API ( $<bundleId>-<class> ) Extend the base InformationAsset object Name all of the properties defined on the bundle itself starting with $ Give each property a single getter and setter, which follow: the camel-case conventions outlined above for custom attributes the annotation conventions outlined above for custom attributes Write your own connector \u00b6 To pickup these extensions, we need to implement our own connector. To maximize re-use, this connector can extend the base IGC connector. Within your new adapter module, you will need to implement two classes: ConnectorProvider class \u00b6 The ConnectorProvider class defines how your custom (extended) connector should be instantiated. Template code for a new ConnectorProvider class 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package whatever.structure.you.desire ; import org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider ; import org.odpi.openmetadata.frameworks.connectors.properties.beans.ConnectorType ; import java.util.ArrayList ; import java.util.List ; public class ExtendedIGCOMRSRepositoryConnectorProvider extends IGCOMRSRepositoryConnectorProvider { static final String CONNECTOR_TYPE_GUID = \"<unique UUID>\" ; static final String CONNECTOR_TYPE_NAME = \"<name for your connector>\" ; static final String CONNECTOR_TYPE_DESC = \"<description of your connector>\" ; public static final String DEFAULT_ZONES = \"defaultZones\" ; public ExtendedIGCOMRSRepositoryConnectorProvider () { Class <?> connectorClass = ExtendedIGCOMRSRepositoryConnector . class ; super . setConnectorClassName ( connectorClass . getName ()); ConnectorType connectorType = new ConnectorType (); connectorType . setType ( ConnectorType . getConnectorTypeType ()); connectorType . setGUID ( CONNECTOR_TYPE_GUID ); connectorType . setQualifiedName ( CONNECTOR_TYPE_NAME ); connectorType . setDisplayName ( CONNECTOR_TYPE_NAME ); connectorType . setDescription ( CONNECTOR_TYPE_DESC ); connectorType . setConnectorProviderClassName ( this . getClass (). getName ()); List < String > recognizedConfigurationProperties = new ArrayList <> (); recognizedConfigurationProperties . add ( DEFAULT_ZONES ); connectorType . setRecognizedConfigurationProperties ( recognizedConfigurationProperties ); super . connectorTypeBean = connectorType ; } } This is almost a copy/paste of the base ConnectorProvider, with the following critical changes: Change the package structure and name of the class itself to whatever makes sense for your situation You can extend the IGCOMRSRepositoryConnectorProvider instead of the OMRSRepositoryConnectorProviderBase Replace the static constants with your own (the GUID, name and description) Change the connectorClass to the class defined in the next section Connector class \u00b6 The Connector class defines how your connector will actually be started up. This must be overridden to define at a minimum the overrides for your extended POJO models. If you are only overriding the models, this can be as simple as overriding the connectToIGC method: Registering the extended POJO models 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package whatever.structure.you.desire ; import com.ibm.custom.connectors.ibm.igc.clientlibrary.model.base.ExtendedTerm ; import org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnector ; import org.odpi.openmetadata.frameworks.connectors.ffdc.ConnectorCheckedException ; public class ExtendedIGCOMRSRepositoryConnector extends IGCOMRSRepositoryConnector { @Override protected void connectToIGC ( String methodName ) throws ConnectorCheckedException { super . connectToIGC ( methodName ); igcRestClient . registerPOJO ( ExtendedTerm . class ); } } Note that we are only registering our extensions to the Term object by registering our ExtendedTerm class. If we also had custom POJOs defined for OpenIGC assets, or other IGC types that were extended with custom attributes, these would simply need additional calls to the igcRestClient.registerPOJO() method for each such class. This will ensure that your extensions are preferred for (de)serialization over any vanilla objects included in the base connector. For any IGC object types that are not extended, the connector will still automatically \"fall-back\" to the vanilla object definitions included in the base connector -- so the base connector is re-used, and all you need to do is define extensions. Building your connector \u00b6 To use these extensions, we finally need to build this project as its own connector. For consistency, it is probably simplest to do this following the same convention used in the base connector -- a distribution module that defines the assembly that should be used for this connector. New distribution module's pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <packaging> jar </packaging> <dependencies> <dependency> <groupId> ${your-group-for-your-extensions} </groupId> <artifactId> ${your-extended-adapter-artifact-id} </artifactId> </dependency> </dependencies> <build> <plugins> <!-- Packaging --> <plugin> <artifactId> maven-assembly-plugin </artifactId> <executions> <execution> <goals> <goal> single </goal> </goals> <phase> prepare-package </phase> <configuration> <skipAssembly> false </skipAssembly> <descriptors> <descriptor> src/main/assemblies/connector.xml </descriptor> </descriptors> <finalName> ${the-name-you-want-for-your-connector-jar-file} </finalName> <tarLongFileMode> gnu </tarLongFileMode> </configuration> </execution> </executions> </plugin> </plugins> </build> Be sure to replace the group, artifact and final jar file name accordingly. Example connector.xml assembly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <assembly xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2\" xsi:schemaLocation= \"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd\" > <id> jar-with-dependencies </id> <formats> <format> jar </format> </formats> <includeBaseDirectory> false </includeBaseDirectory> <dependencySets> <dependencySet> <outputDirectory> / </outputDirectory> <useProjectArtifact> false </useProjectArtifact> <unpack> true </unpack> <scope> compile </scope> <includes> <include> ${your-group-for-your-extensions}:${your-extended-adapter-artifact-id} </include> <include> ${your-group-for-your-extensions}:${your-extended-client-library-artifact-id} </include> <include> org.odpi.egeria:egeria-connector-ibm-igc-adapter </include> <include> org.odpi.egeria:ibm-igc-rest-client-library </include> <include> com.flipkart.zjsonpatch:zjsonpatch </include> <include> org.apache.commons:commons-collections4 </include> </includes> </dependencySet> </dependencySets> </assembly> The explicit includes will ensure that the base IGC connector is included (for fall-backs to vanilla models and behavior) as well as your extensions and overrides. (Of course, don't forget to replace the highlighted placeholder values with your extended connector's group and artifact IDs.) You then simply need to: Ensure this jar file is included in the path defined by your LOADER_PATH variable to be picked up by the OMAG Platform When calling the OMAG admin services to configure the connector, ensure that the connectorProviderClassName for the connectorType is set to the canonical class name of your extended ConnectorProvider class rather than the base IGC connector's ConnectorProvider class name Extending the mappings with your own logic \u00b6 The walkthrough above simply covers extending the model. With the changes above, the values of non-relationship custom attributes should automatically start appearing in the additionalProperties map of any Egeria (Referenceable-derived) entity. Of course, if you want to use this custom information to drive some other mapping to the Egeria types, then you will also need to extend the mapping logic of the base connector (not only the model). To do this, begin by creating a new package in your extended adapter module with the following constraints: It should be a unique structure under which all mapping classes can be contained (eg. whatever.structure.you.desire.mappings ). Create sub-packages for each type of mapping, whose names must be: attributes for AttributeMappings entities for EntityMappings classifications for ClassificationMappings relationships for RelationshipMappings Extending the existing mappings \u00b6 To extend an existing mapping, simply define a new class in your mapping package with a name identical to the base connectors' mapping class. Ensure this class is in the sub-package relevant to the type it is mapping. Example: extending GlossaryTerm mapping 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package whatever.structure.you.desire.mappings.entities ; import org.odpi.egeria.connectors.ibm.igc.clientlibrary.IGCVersionEnum ; public class GlossaryTermMapper extends org . odpi . egeria . connectors . ibm . igc . repositoryconnector . mapping . entities . GlossaryTermMapper { private static class Singleton { private static final GlossaryTermMapper INSTANCE = new GlossaryTermMapper (); } public static GlossaryTermMapper getInstance ( IGCVersionEnum version ) { return Singleton . INSTANCE ; } private GlossaryTermMapper () { super (); addSimplePropertyMapping ( \"custom_Test Attribute\" , \"usage\" ); } } Note the following: This mapping class is defined under the .entities sub-package of the overall mappings package. Define a private static class Singleton that captures a static final INSTANCE of your class. Define a public static getInstance() method that returns this Singleton.INSTANCE , and is passed an IGCVersionEnum . While typically unused, if you want to have different logic depending on the version of IGC being used, this enum allows you to do so (for an example, see the base connectors' DataClassMapper ) Define a private (or protected ) no-args constructor that first calls the no-args constructor of the parent class. Add your extra logic or mappings (in the example above, the addSimplePropertyMapping() maps our custom attribute to the usage OMRS property). Implementing your own mappings \u00b6 To implement your own mappings, follow the same basic guidance as above, but naturally do not extend a base connectors' mapping class. Instead, directly extend one of the following: org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.attributes.EnumMapping for an AttributeMapping (primitive types are already mapped, so this is assuming the only attributes you would need to map are enumerations) org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.entities.ReferenceableMapper for an EntityMapping (this ensures automatic mapping for complex properties like qualifiedName and additionalProperties ) org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.classifications.ClassificationMapping for a ClassificationMapping org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.relationships.RelationshipMapping for a RelationshipMapping Note that in these cases there are various methods you may also want or need to override to influence the behavior of your mapping. See any of the base connectors' mapping classes for examples.","title":"Extending adapters"},{"location":"reference/extending/#extending-the-connector","text":"The IGC connector is intended to be extensible, with the intention of allowing you to re-use the base logic already contained in the connector while adding only the extra portions required for your particular implementation or desired behavior. The following sections describe the recommended approach to developing such extensions, without needing to modify or re-build the base connector itself.","title":"Extending the connector"},{"location":"reference/extending/#project-setup","text":"The basic approach is to create a new project in which you will develop your extensions. This project should have as dependencies the base connector. Root-level pom.xml snippet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <dependencyManagement> <dependencies> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> ibm-igc-rest-client-library </artifactId> <version> ${open-metadata.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> egeria-connector-ibm-igc-adapter </artifactId> <version> ${open-metadata.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> repository-services-apis </artifactId> <version> ${open-metadata.version} </version> <scope> provided </scope> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> open-connector-framework </artifactId> <version> ${open-metadata.version} </version> <scope> provided </scope> </dependency> </dependencies> </dependencyManagement> These are the minimal dependencies to re-use the logic already provided by the base connector. Like the base connector project, you should then also have modules in your own project for: the client library, where you'll put any extensions to the data model, e.g. for custom attributes or OpenIGC objects the adapter, where you'll put any extensions to or net-new mapping logic Client library pom.xml snippet 1 2 3 4 5 6 <dependencies> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> ibm-igc-rest-client-library </artifactId> </dependency> </dependencies> This includes the base client library as a dependency. Adapter module pom.xml snippet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <dependencies> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> egeria-connector-ibm-igc-adapter </artifactId> </dependency> <dependency> <groupId> ${your-group-for-your-extensions} </groupId> <artifactId> ${your-extended-client-library-artifact-id} </artifactId> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> open-connector-framework </artifactId> </dependency> <dependency> <groupId> org.odpi.egeria </groupId> <artifactId> repository-services-apis </artifactId> </dependency> </dependencies> Note that you will need to replace the highlighted lines with the group and artifact IDs for your extended client library.","title":"Project setup"},{"location":"reference/extending/#extending-the-vanilla-igc-model","text":"To avoid potential injection exposure risks, the (de)serialization is strongly typed and will not dynamically handle arbitrary JSON or additions to the Java beans (POJOs). As a result, the connector out-of-the-box will not handle any custom attributes in IGC or any new asset types developed through OpenIGC. All of these will be automatically ignored. Their values will not even be included in the additionalProperties map of a Referenceable, for example. Therefore, if you have extended the vanilla IGC model with either custom attributes or OpenIGC assets, and you want to be able to make use of them as part of your connector, you will need to extend the connector with this handling.","title":"Extending the vanilla IGC model"},{"location":"reference/extending/#handling-custom-attributes","text":"In your own client library module, create new POJO objects for each IGC asset type on which you have a custom attribute. These should extend the base connectors' model objects. For example, if you have a new custom attribute called Test Attribute defined against IGC 's term objects, you would write a new class like the following: Example class extending the term object with a Test Attribute custom attribute 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package whatever.structure.you.desire ; import com.fasterxml.jackson.annotation.* ; import org.odpi.egeria.connectors.ibm.igc.clientlibrary.model.base.Term ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY ; @JsonTypeInfo ( use = JsonTypeInfo . Id . NAME , include = JsonTypeInfo . As . EXISTING_PROPERTY , property = \"_type\" , visible = true , defaultImpl = Term . class ) @JsonAutoDetect ( getterVisibility = PUBLIC_ONLY , setterVisibility = PUBLIC_ONLY , fieldVisibility = NONE ) @JsonInclude ( JsonInclude . Include . NON_NULL ) @JsonIgnoreProperties ( ignoreUnknown = true ) @JsonTypeName ( \"term\" ) public class ExtendedTerm extends Term { @JsonProperty ( \"custom_Test Attribute\" ) protected String customTestAttribute ; @JsonProperty ( \"custom_Test Attribute\" ) public String getCustomTestAttribute () { return this . customTestAttribute ; } @JsonProperty ( \"custom_Test Attribute\" ) public void setCustomTestAttribute ( String customTestAttribute ) { this . customTestAttribute = customTestAttribute ; } } There are a few important points to follow when developing such extensions. These must be followed precisely as a number of the default mechanisms for mapping rely on these precise constraints: Include the Jackson annotations as illustrated in the example: in particular ensure that @JsonTypeName is set to the name of the IGC asset type (as it is known via the IGC REST API) Ensure that your new class extends the base class (in this case org.odpi.egeria.connectors.ibm.igc.clientlibrary.model.base.Term ) to ensure that all of the other base properties, getters, setters and (de)serialization are appropriately handled Add any new properties as protected members of the class: Name them using lower camel-case (remove spaces, underscores, etc and capitalize every word except the first) Always start them with custom Annotate each property with the name of the custom attribute as known to the IGC REST API (this will always follow the convention custom_<Attribute Name> , where <Attribute Name> is as you have defined it: including any spaces) Add a single getter for each new property: Name the method using lower camel-case Always start the method with get followed by the camel-case of the attribute name Annotate each property with the name of the custom attribute as known to the IGC REST API (see above) Add a single setter for each new property: Name the method using lower camel-case Always start the method with set followed by the camel-case of the attribute name Annotate each property with the name of the custom attribute as known to the IGC REST API (see above)","title":"Handling custom attributes"},{"location":"reference/extending/#handling-new-asset-types-openigc","text":"As with the custom attributes, the connector will not handle any new asset types that you may have added through OpenIGC. You will need to extend the model (and mapping logic) similarly to what is suggested above for custom attributes in order to make use of any OpenIGC assets in your implementation through the connector. Since OpenIGC assets are entirely new objects rather than new properties on existing objects, these should be defined as new classes in your model. They should always extend the base InformationAsset object. For example, if you have a new OpenIGC object type named Bar within a bundle named Foo , you would write a new class like the following: Example class for a new object type named Bar in OpenIGC bundle Foo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package whatever.structure.you.desire ; import com.fasterxml.jackson.annotation.* ; import org.odpi.egeria.connectors.ibm.igc.clientlibrary.model.base.InformationAsset ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE ; import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY ; @JsonAutoDetect ( getterVisibility = PUBLIC_ONLY , setterVisibility = PUBLIC_ONLY , fieldVisibility = NONE ) @JsonInclude ( JsonInclude . Include . NON_NULL ) @JsonIgnoreProperties ( ignoreUnknown = true ) @JsonTypeName ( \"$Foo-Bar\" ) public class FooBar extends InformationAsset { protected String $firstProperty ; protected String $secondProperty ; @JsonProperty ( \"$firstProperty\" ) public String getFirstProperty () { return this . $firstProperty ; } @JsonProperty ( \"$firstProperty\" ) public void setFirstProperty ( String firstProperty ) { this . $firstProperty = firstProperty ; } @JsonProperty ( \"$secondProperty\" ) public String getSecondProperty () { return this . $secondProperty ; } @JsonProperty ( \"$secondProperty\" ) public void setSecondProperty ( String secondProperty ) { this . $secondProperty = secondProperty ; } } Once again, the example should be followed precisely: Use the Jackson annotations, including the @JsonTypeName giving the name of the object as it will be known through the IGC REST API ( $<bundleId>-<class> ) Extend the base InformationAsset object Name all of the properties defined on the bundle itself starting with $ Give each property a single getter and setter, which follow: the camel-case conventions outlined above for custom attributes the annotation conventions outlined above for custom attributes","title":"Handling new asset types (\"OpenIGC\")"},{"location":"reference/extending/#write-your-own-connector","text":"To pickup these extensions, we need to implement our own connector. To maximize re-use, this connector can extend the base IGC connector. Within your new adapter module, you will need to implement two classes:","title":"Write your own connector"},{"location":"reference/extending/#connectorprovider-class","text":"The ConnectorProvider class defines how your custom (extended) connector should be instantiated. Template code for a new ConnectorProvider class 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package whatever.structure.you.desire ; import org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider ; import org.odpi.openmetadata.frameworks.connectors.properties.beans.ConnectorType ; import java.util.ArrayList ; import java.util.List ; public class ExtendedIGCOMRSRepositoryConnectorProvider extends IGCOMRSRepositoryConnectorProvider { static final String CONNECTOR_TYPE_GUID = \"<unique UUID>\" ; static final String CONNECTOR_TYPE_NAME = \"<name for your connector>\" ; static final String CONNECTOR_TYPE_DESC = \"<description of your connector>\" ; public static final String DEFAULT_ZONES = \"defaultZones\" ; public ExtendedIGCOMRSRepositoryConnectorProvider () { Class <?> connectorClass = ExtendedIGCOMRSRepositoryConnector . class ; super . setConnectorClassName ( connectorClass . getName ()); ConnectorType connectorType = new ConnectorType (); connectorType . setType ( ConnectorType . getConnectorTypeType ()); connectorType . setGUID ( CONNECTOR_TYPE_GUID ); connectorType . setQualifiedName ( CONNECTOR_TYPE_NAME ); connectorType . setDisplayName ( CONNECTOR_TYPE_NAME ); connectorType . setDescription ( CONNECTOR_TYPE_DESC ); connectorType . setConnectorProviderClassName ( this . getClass (). getName ()); List < String > recognizedConfigurationProperties = new ArrayList <> (); recognizedConfigurationProperties . add ( DEFAULT_ZONES ); connectorType . setRecognizedConfigurationProperties ( recognizedConfigurationProperties ); super . connectorTypeBean = connectorType ; } } This is almost a copy/paste of the base ConnectorProvider, with the following critical changes: Change the package structure and name of the class itself to whatever makes sense for your situation You can extend the IGCOMRSRepositoryConnectorProvider instead of the OMRSRepositoryConnectorProviderBase Replace the static constants with your own (the GUID, name and description) Change the connectorClass to the class defined in the next section","title":"ConnectorProvider class"},{"location":"reference/extending/#connector-class","text":"The Connector class defines how your connector will actually be started up. This must be overridden to define at a minimum the overrides for your extended POJO models. If you are only overriding the models, this can be as simple as overriding the connectToIGC method: Registering the extended POJO models 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package whatever.structure.you.desire ; import com.ibm.custom.connectors.ibm.igc.clientlibrary.model.base.ExtendedTerm ; import org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnector ; import org.odpi.openmetadata.frameworks.connectors.ffdc.ConnectorCheckedException ; public class ExtendedIGCOMRSRepositoryConnector extends IGCOMRSRepositoryConnector { @Override protected void connectToIGC ( String methodName ) throws ConnectorCheckedException { super . connectToIGC ( methodName ); igcRestClient . registerPOJO ( ExtendedTerm . class ); } } Note that we are only registering our extensions to the Term object by registering our ExtendedTerm class. If we also had custom POJOs defined for OpenIGC assets, or other IGC types that were extended with custom attributes, these would simply need additional calls to the igcRestClient.registerPOJO() method for each such class. This will ensure that your extensions are preferred for (de)serialization over any vanilla objects included in the base connector. For any IGC object types that are not extended, the connector will still automatically \"fall-back\" to the vanilla object definitions included in the base connector -- so the base connector is re-used, and all you need to do is define extensions.","title":"Connector class"},{"location":"reference/extending/#building-your-connector","text":"To use these extensions, we finally need to build this project as its own connector. For consistency, it is probably simplest to do this following the same convention used in the base connector -- a distribution module that defines the assembly that should be used for this connector. New distribution module's pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <packaging> jar </packaging> <dependencies> <dependency> <groupId> ${your-group-for-your-extensions} </groupId> <artifactId> ${your-extended-adapter-artifact-id} </artifactId> </dependency> </dependencies> <build> <plugins> <!-- Packaging --> <plugin> <artifactId> maven-assembly-plugin </artifactId> <executions> <execution> <goals> <goal> single </goal> </goals> <phase> prepare-package </phase> <configuration> <skipAssembly> false </skipAssembly> <descriptors> <descriptor> src/main/assemblies/connector.xml </descriptor> </descriptors> <finalName> ${the-name-you-want-for-your-connector-jar-file} </finalName> <tarLongFileMode> gnu </tarLongFileMode> </configuration> </execution> </executions> </plugin> </plugins> </build> Be sure to replace the group, artifact and final jar file name accordingly. Example connector.xml assembly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <assembly xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2\" xsi:schemaLocation= \"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd\" > <id> jar-with-dependencies </id> <formats> <format> jar </format> </formats> <includeBaseDirectory> false </includeBaseDirectory> <dependencySets> <dependencySet> <outputDirectory> / </outputDirectory> <useProjectArtifact> false </useProjectArtifact> <unpack> true </unpack> <scope> compile </scope> <includes> <include> ${your-group-for-your-extensions}:${your-extended-adapter-artifact-id} </include> <include> ${your-group-for-your-extensions}:${your-extended-client-library-artifact-id} </include> <include> org.odpi.egeria:egeria-connector-ibm-igc-adapter </include> <include> org.odpi.egeria:ibm-igc-rest-client-library </include> <include> com.flipkart.zjsonpatch:zjsonpatch </include> <include> org.apache.commons:commons-collections4 </include> </includes> </dependencySet> </dependencySets> </assembly> The explicit includes will ensure that the base IGC connector is included (for fall-backs to vanilla models and behavior) as well as your extensions and overrides. (Of course, don't forget to replace the highlighted placeholder values with your extended connector's group and artifact IDs.) You then simply need to: Ensure this jar file is included in the path defined by your LOADER_PATH variable to be picked up by the OMAG Platform When calling the OMAG admin services to configure the connector, ensure that the connectorProviderClassName for the connectorType is set to the canonical class name of your extended ConnectorProvider class rather than the base IGC connector's ConnectorProvider class name","title":"Building your connector"},{"location":"reference/extending/#extending-the-mappings-with-your-own-logic","text":"The walkthrough above simply covers extending the model. With the changes above, the values of non-relationship custom attributes should automatically start appearing in the additionalProperties map of any Egeria (Referenceable-derived) entity. Of course, if you want to use this custom information to drive some other mapping to the Egeria types, then you will also need to extend the mapping logic of the base connector (not only the model). To do this, begin by creating a new package in your extended adapter module with the following constraints: It should be a unique structure under which all mapping classes can be contained (eg. whatever.structure.you.desire.mappings ). Create sub-packages for each type of mapping, whose names must be: attributes for AttributeMappings entities for EntityMappings classifications for ClassificationMappings relationships for RelationshipMappings","title":"Extending the mappings with your own logic"},{"location":"reference/extending/#extending-the-existing-mappings","text":"To extend an existing mapping, simply define a new class in your mapping package with a name identical to the base connectors' mapping class. Ensure this class is in the sub-package relevant to the type it is mapping. Example: extending GlossaryTerm mapping 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package whatever.structure.you.desire.mappings.entities ; import org.odpi.egeria.connectors.ibm.igc.clientlibrary.IGCVersionEnum ; public class GlossaryTermMapper extends org . odpi . egeria . connectors . ibm . igc . repositoryconnector . mapping . entities . GlossaryTermMapper { private static class Singleton { private static final GlossaryTermMapper INSTANCE = new GlossaryTermMapper (); } public static GlossaryTermMapper getInstance ( IGCVersionEnum version ) { return Singleton . INSTANCE ; } private GlossaryTermMapper () { super (); addSimplePropertyMapping ( \"custom_Test Attribute\" , \"usage\" ); } } Note the following: This mapping class is defined under the .entities sub-package of the overall mappings package. Define a private static class Singleton that captures a static final INSTANCE of your class. Define a public static getInstance() method that returns this Singleton.INSTANCE , and is passed an IGCVersionEnum . While typically unused, if you want to have different logic depending on the version of IGC being used, this enum allows you to do so (for an example, see the base connectors' DataClassMapper ) Define a private (or protected ) no-args constructor that first calls the no-args constructor of the parent class. Add your extra logic or mappings (in the example above, the addSimplePropertyMapping() maps our custom attribute to the usage OMRS property).","title":"Extending the existing mappings"},{"location":"reference/extending/#implementing-your-own-mappings","text":"To implement your own mappings, follow the same basic guidance as above, but naturally do not extend a base connectors' mapping class. Instead, directly extend one of the following: org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.attributes.EnumMapping for an AttributeMapping (primitive types are already mapped, so this is assuming the only attributes you would need to map are enumerations) org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.entities.ReferenceableMapper for an EntityMapping (this ensures automatic mapping for complex properties like qualifiedName and additionalProperties ) org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.classifications.ClassificationMapping for a ClassificationMapping org.odpi.egeria.connectors.ibm.igc.repositoryconnector.mapping.relationships.RelationshipMapping for a RelationshipMapping Note that in these cases there are various methods you may also want or need to override to influence the behavior of your mapping. See any of the base connectors' mapping classes for examples.","title":"Implementing your own mappings"},{"location":"reference/javadoc/","text":"JavaDocs \u00b6 IGC Client Library \u00b6 IA Client Library \u00b6 IGC Adapter \u00b6 DataStage Adapter \u00b6","title":"JavaDocs"},{"location":"reference/javadoc/#javadocs","text":"","title":"JavaDocs"},{"location":"reference/javadoc/#igc-client-library","text":"","title":"IGC Client Library"},{"location":"reference/javadoc/#ia-client-library","text":"","title":"IA Client Library"},{"location":"reference/javadoc/#igc-adapter","text":"","title":"IGC Adapter"},{"location":"reference/javadoc/#datastage-adapter","text":"","title":"DataStage Adapter"}]}